#!/usr/bin/perl -w

# This should be run from a YYYY/trajectories directory.
# It will then take each zip file and look for the proper place to put it.

# File naming convention:
# YYYY-MM-DD-A-B-yyyy-mm-dd-AAA-AAAA-BBBB-CCCCC-wgs84-CCC-DDD.txt
#
# where:
#
# YYYY-MM-DD : flight date
# A          : flight "number", A, B, C...
# B          : B P - Broadcast / Precision trajectory
# yyyy-mm-dd : processing date when trajectory was created
# AAA        : Creator initials
# AAAA       : Airport ID
# BBBB       : Remote ground station
# CCCCC      : Airplane callsign
# wgs84
# CCC        : cmb fwd rev - Combined, Forward only, Reverse only
# DDD        : ins pnav
# .txt

require 'newgetopt.pl' || die "Unable to require newgetopt.pl\n";

undef $opt_help;    # just to quiet the warning message
undef $junk;        # same
undef $opt_where;   # same

sub showusage {
  print <<EOF;

  $0 [file1] [file2]

  run from a YYYY/trajectories directory.
  It finds where each zip file should be unzipped, unzips it, and runs pnav2ybin
  as necessary.

  If filenames are listed on the cmdline, only those files are checked to
  see if they need to be installed.

  Each zip file is displayed as it is processed, regardless of the options used.

  -norun    : don't execute anything, just show what would have been done.
  -verbose  : show more diagnostics
  -where    : force showing where it'll put the file, even if already installed

EOF
  exit(0);
}


sub get_cli_opts {
  &showusage unless
  &NGetOpt(
  "help",     # help
  "norun",    # don't execute anything, just show what would have been done.
  "verbose",  # show more diagnostics
  "where",    # force showing where it'll put the file, even if already installed
  "myint=i",
  "myfloat=f",
  );
  &showusage() if defined($opt_help);
}


############################################################

&get_cli_opts();

printf("myint   = %d\n", $opt_myint  ) if ( $opt_myint  );
printf("myfloat = %f\n", $opt_myfloat) if ( $opt_myfloat);

# check to see if any filenames were supplied on the cmdline.
# if so, only process those, else check everything
if ( $#ARGV >= 0 ) {
  my $list="";
  for ($i=0; $i<=$#ARGV; ++$i) {
    $list .= $ARGV[$i] . " ";
  }
  $LS_CMD = "ls $list|";
}  else {
  $LS_CMD = "ls *.zip|";
}

############################################################

$startdir = `pwd`;
chop $startdir;

open(LS, $LS_CMD) || die("Unable to run $LS_CMD\n");
while ( $file = <LS> ) {
  chop $file;

  ($A, $B, $C, $D, $E, $junk) = split(/-/, $file, 6);
  if ($A =~ /^(\d{4})(\d{2})(\d{2})/) {
    $y = $1;
    $m = $2;
    $d = $3;
  } elsif ( $A =~ /\D/ ) {
    $y = $m = $d = 0;
  } elsif ( $A < 1990 ) {
    $m = $A;
    $d = $B;
    $y = $C;

    $y =~ s/[a-zA-Z]//g;   # force it into being a numeric when VR misses a "-"
    $y += 2000 if ( $y < 20 );
    $y += 1900 if ( $y < 100);
  } elsif(length($A) < 5) {
    $y = $A;
    $m = $B;
    $d = $C;
  } else {
    $y = $m = $d = 0;
  }

  # Now determine which flight
  # the 4th field is new and conflicts with the (now) 5th field,
  # so we first check to see if the 5th field is the new or the
  # orig 5th field

  if ( $E =~ /\D/ ) {      # 5th field is non-numeric, must be new
    $f = sprintf("-%s", $D );
  } else {
    $f = "";               # old format, set to null

  }

  $YYYYMMDD = sprintf("%04d%02d%02d%s", $y, $m, $d, $f);
  $YYYY_MM_DD = sprintf("%04d-%02d-%02d%s", $y, $m, $d, $f);

  printf("%s\t%s\n", $YYYY_MM_DD, $file);

  open(FIND1, "find .. -follow -type d -name $YYYYMMDD -or -type d -name $YYYY_MM_DD |") || die("Unable to run find1\n");
  while ( $dir = <FIND1> ) {
    chop $dir;
    $tmp = $dir . "/trajectories";
    $dir = $tmp;

    printf("\t%s\tdestination\n", $dir) if ( $opt_where );
    if ( ! -d $dir ) {
      printf("\t%s\tdestination\n", $dir) if ( ! $opt_where );  # don't show twice
      printf("$dir does not exist, creating\n");
      mkdir ( $dir ) if ( ! $opt_norun );
    }
    chdir($dir );

    ###### Leave the zip file where it is, but expand it in the new location.

    $zipdir =  $file;
    $zipdir =~ s/\.zip//;

    if ( ! -d $zipdir ) {
      printf("\tmaking %s/%s\n", $dir,$zipdir);
      mkdir ( $zipdir ) if ( ! $opt_norun );
      chdir ( $zipdir );
      printf("\tunzip ../%s\n", $zipdir) if ( $opt_verbose );
      # -j junks the directory structure inside the zip file.
      system("unzip -j $startdir/" . $zipdir) if ( ! $opt_norun );

      # Check to see if this was a gps trajectory
      open(FIND2, "find . -follow -name  \"\*cmb-pnav\" -or -name \"\*pnav.txt\"|")
        || die ("Unable to run find2\n");
      while ( $txt = <FIND2> ) {
        chop $txt;
        printf("\tpnav2ybin $txt\n")  if ( $opt_verbose );
        system("pnav2ybin $txt") if ( ! $opt_norun );
      }

      # Check to see if this was an ins trajectory
      open(FIND2, "find . -follow -name  \"\*imu.txt\" -or -name \"\*ins.txt\" |")
        || die ("Unable to run find2\n");
      while ( $txt = <FIND2> ) {
        chop $txt;
        $txt =~ s/\.\///;
        printf("\tiex_ascii2pbd $txt\n")  if ( $opt_verbose );
        system("iex_ascii2pbd `pwd`/$txt") if ( ! $opt_norun );
      }
    }

    chdir ($startdir);     # go back to our starting directory

  }
  close (FIND1);

}
close (LS);
