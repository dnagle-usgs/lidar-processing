#!/usr/bin/perl -w

# This should be run from a YYYY/trajectories directory.
# It will then take each zip file and look for the proper place to put it.

# File naming convention:
# YYYY-MM-DD-A-B-yyyy-mm-dd-AAA-AAAA-BBBB-CCCCC-wgs84-CCC-DDD.txt
#
# where:
#
# YYYY-MM-DD : flight date
# A          : flight "number", A, B, C...
# B          : B P - Broadcast / Precision trajectory
# yyyy-mm-dd : processing date when trajectory was created
# AAA        : Creator initials
# AAAA       : Airport ID
# BBBB       : Remote ground station
# CCCCC      : Airplane callsign
# wgs84
# CCC        : cmb fwd rev - Combined, Forward only, Reverse only
# DDD        : ins pnav
# .txt
#
# use strict;     # This breaks $getopt

my $Id     = '$Id$';
my $Source = '$Source$';

use warnings;
use Getopt::Long;
use Cwd;
use File::Spec;

my $help;         # quiet the warning message
my $getopt;       # quiet the warning message
my $options;

my $myint;
my $magic;
my $myfloat;
my $mystr;
my $verbose;
my $status = 1;
my $precision;

our $logfn = undef;
our $norun = 0;

sub getnow {
  my($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
  $year += 1900;
  $mon += 1;
  my $date = sprintf("%04d-%02d-%02d", $year, $mon, $mday);
  my $time = sprintf("%04d%02d%02d%02d%02d%02d", $year, $mon, $mday, $hour, $min, $sec);
  return ($date, $time);
}
our($today, $time) = getnow;

sub showusage {
  print <<EOF;
$Id
$Source

$0 [-norun] [-verbose] [-where] [-precise] [file1] [file2]

run from a YYYY/trajectories directory.
It finds where each zip file should be unzipped, unzips it, and runs pnav2ybin
as necessary.

If filenames are listed on the cmdline, only those files are checked to
see if they need to be installed.

Each zip file is displayed as it is processed, regardless of the options used.

-norun    : don't execute anything, just show what would have been done.
-verbose  : show more diagnostics
-where    : force showing where it'll put the file, even if already installed
-precise  : only install -p- files

EOF

# print out actual GetOptions() used if -nohelp is specified.
printf("\n%s\n", $options) if ( $help == 0 );

  exit(0);
}

# Prompt the user for a single-character response:
#   prompter($prompt, $want);
# $prompt should be a string that will be printed to tell the user what they
# are responding to. $want should be a series of characters that are
# permissible responses. If any of the characters are uppercase, then the first
# uppercase character is the default response and will be used if they just hit
# enter. The input is interpreted without case sensitivity and will be returned
# as uppercase. Invalid input will cause the prompt to be re-issued.
sub prompter {
  my $prompt = shift;
  my $want = shift;
  while(1) {
    print "$prompt [$want]: ";
    chomp(my $input = <STDIN>);

    if($input =~ /^[$want]$/i) {
      return uc($input);
    }

    if($input eq "") {
      return $1 if($want =~ /([A-Z])/);
    } else {
      print "Unrecognized response: $input\n";
    }

    print "Response must be a single character, one of: $want\n\n";
  }
}

sub openlog {
  my $refdir = shift;
  my $response;

  our($norun, $logfn, $logfh);

  return if($norun);

  $logfn = undef;
  close($logfh) if(defined($logfh));
  $logfh = undef;

  my $logdir = File::Spec->catdir(getcwd, $refdir, "../alps");
  $logdir = Cwd::abs_path($logdir);
  my $main = File::Spec->catdir($logdir, "trajectories.log");
  my $alt = File::Spec->catdir($logdir, "trajectories.$time.log");

  unless(-d $logdir) {
    unless(mkdir $logdir) {
      print "Unable to create log directory:\n  $logdir\n";
      $response = prompter("Continue without logging?", "yN");
      exit if($response eq "N");
      return;
    }
  }

  # If the alternate log file exists, assume we want to use it
  if(-e $alt && -w $alt) {
    $logfn = $alt;

    if(open($logfh, ">> $logfn")) {
      return;
    } else {
      print "Unable to open log file:\n  $logfn\n";
      $response = prompter("Continue without logging?", "yN");
      exit if($response eq "N");
      $logfh = $logfn = undef;
      return;
    }
  }

  # Attempt normal log file
  $logfn = $main;
  unless(open($logfh, ">> $logfn")) {
    print "Unable to open log file:\n  $logfn\n";

    $logfn = $alt;
    if(open($logfh, ">> $logfn")) {
      print "Falling back to alternate log file:\n  $logfn\n";
      return;
    }

    print "Unable to open alternate log file:\n  $logfn\n";
    $logfh = $logfn = undef;
    $response = prompter("Continue without logging?", "yN");
    exit if($response eq "N");
    return;
  }
}

sub logger {
  my $msg = shift;
  our($logfh);
  return unless(defined($logfh));
  print $logfh $msg;
}

sub sys_try {
  my $cmd = shift;
  my $response;
  my $fh;
  unless(open($fh, "$cmd 2>&1 |")) {
    print "Unable to run command:\n  $cmd\n";
    print "Couldn't fork: $!";
    $response = prompter("Do you want to continue?", "yN");
    exit if($response eq "N");
    return 0;
  }

  my $output = '';
  while(<$fh>) {
    $output .= $_;
  }

  unless(close($fh)) {
    print "Problem encountered during command:\n  $cmd\n";
    print "Perl says: $! $?\n";
    $response = prompter("Would you like to see the output collected from the command?", "Yn");

    if($response eq "Y") {
      print "\n$output\n\n";
    }

    $response = prompter("Do you want to continue?", "yN");
    exit if($response eq "N");
    return 0;
  }

  return 1;
}

sub getopt();

############################################################
# defaults are supplied in GetOptions itself
# use: perldoc Getopt::Long           # to get the manpage #

$options = <<END;
\$getopt = GetOptions (
  'help!'      => \\( \$help = -1   ),  # use -nohelp to show this
  'norun'      => \\( \$norun    =  0   ),  # don't execute anything, just show what would have been done
  'verbose!'   => \\( \$verbose  = -1   ),  # show more diagnostics
  'where'      => \\( \$where    =  0   ),  # force showing where it'll put the file, even if already installed
  'precision'  => \\( \$precision=  0   ),  # only install -p- files
);
&showusage() if (\$help >= 0);
END

eval $options;
&showusage() if ($getopt == 0); # result is 1 if no errors


############################################################

sub main();

# check to see if any filenames were supplied on the cmdline.
# if so, only process those, else check everything
if ( $#ARGV >= 0 ) {
  my $list="";
  $list .= $_ . " " foreach ( @ARGV );
  $LS_CMD = "ls $list|";
}  else {
  $LS_CMD = "ls *.zip|";
}

############################################################

$startdir = `pwd`;
chomp $startdir;

open(LS, $LS_CMD) || die("Unable to run $LS_CMD\n");
while ( $file = <LS> ) {
  chomp $file;

  my $type;
  my ($A, $B, $C, $D, $E, $junk) = split(/-/, $file, 6);
  if ($A =~ /^(\d{4})(\d{2})(\d{2})/) {
    $y = $1;
    $m = $2;
    $d = $3;
  } elsif ( $A =~ /\D/ ) {
    $y = $m = $d = 0;
  } elsif ( $A < 1990 ) {
    $m = $A;
    $d = $B;
    $y = $C;

    $y =~ s/[a-zA-Z]//g;   # force it into being a numeric when VR misses a "-"
    $y += 2000 if ( $y < 20 );
    $y += 1900 if ( $y < 100);
  } elsif(length($A) < 5) {
    $y = $A;
    $m = $B;
    $d = $C;
  } else {
    $y = $m = $d = 0;
  }

  # Now determine which flight
  # the 4th field is new and conflicts with the (now) 5th field,
  # so we first check to see if the 5th field is the new or the
  # orig 5th field

  if ( $E =~ /\D/ ) {      # 5th field is non-numeric, must be new
    $f = sprintf("-%s", $D );
    $type = $E;
  } else {
    $f = "";               # old format, set to null
    $type = $D;
  }

  $YYYYMMDD = sprintf("%04d%02d%02d%s", $y, $m, $d, $f);
  $YYYY_MM_DD = sprintf("%04d-%02d-%02d%s", $y, $m, $d, $f);

  my $skip = ( $precision && $type eq "p" ) ? 0 : 1;
  printf("%s: %s\t%s %s\n", $type, $YYYY_MM_DD, $file, $skip ? "<-- Skipping, not precise" : "");

  if ( ! $skip ) {
    chdir($startdir);
    open(FIND1, "find .. -follow -type d -name $YYYYMMDD -or -type d -name $YYYY_MM_DD |") || die("Unable to run find1\n");
    while ( $dir = <FIND1> ) {
      chomp $dir;
      chdir($startdir);
      openlog($dir);
      $tmp = $dir . "/trajectories";
      $dir = $tmp;

      printf("\t%s\tdestination\n", $dir) if ( $where );
      if ( ! -d $dir ) {
        printf("\t%s\tdestination\n", $dir) if ( ! $where );  # don't show twice
        printf("\t$dir does not exist, creating\n");
        mkdir ( $dir ) if ( ! $norun );
      }
      chdir($dir );

      ###### Leave the zip file where it is, but expand it in the new location.

      $zipdir =  $file;
      $zipdir =~ s/\.zip//;

      if ( ! -d $zipdir ) {
        printf("\tmaking %s/%s\n", $dir,$zipdir);
        mkdir ( $zipdir ) if ( ! $norun );
        chdir ( $zipdir );
        printf("\tunzip ../%s\n", $zipdir) if ( $verbose );
        # -j junks the directory structure inside the zip file.

        $status = sys_try("unzip -j $startdir/" . $zipdir) unless($norun);
        next unless($status);

        # Check to see if this was a gps trajectory
        open(FIND2, "find . -follow -name  \"\*cmb-pnav\" -or -name \"\*pnav.txt\"|")
          || die ("Unable to run find2\n");
        while ( $txt = <FIND2> ) {
          chomp $txt;
          logger("$today $txt\n");
          printf("\tpnav2ybin $txt\n")  if ( $verbose );
          sys_try("pnav2ybin $txt") unless($norun);
        }

        # Check to see if this was an ins trajectory
        open(FIND2, "find . -follow -name  \"\*imu.txt\" -or -name \"\*ins.txt\" |")
          || die ("Unable to run find2\n");
        while ( $txt = <FIND2> ) {
          chomp $txt;
          logger("$today $txt\n");
          $txt =~ s/\.\///;
          printf("\tiex_ascii2pbd $txt\n")  if ( $verbose );
          sys_try("iex_ascii2pbd `pwd`/$txt") unless($norun);
        }
      }
    }
    close (FIND1);
  }
}
close (LS);
