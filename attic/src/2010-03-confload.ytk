################################################################################
# This file was moved to the attic on 2010-03-30. The file provides a GUI used #
# solely for the functionality in confload.i, which was also moved to the      #
# attic. See 2010-03-confload.i for details.                                   #
################################################################################

global path conflist

proc write_conf { } {
   destroy  .write
   toplevel .write
   wm title .write "Write conf file"

   foreach x {1 2 3 4 5 6 7 8 9} {
      frame .write.$x -relief groove -borderwidth 3
      pack .write.$x -side top
   }

	set fname ""
	set edbfn   ""
   set pnav  ""
	set imu   ""
	set map   ""
	set lim   0
	set ops   ""
	set bat   0 
	set batfs ""
   set oth   "none"

	LabelEntry .write.1.fake -textvariable bat -text $bat
	LabelEntry .write.2.fake -textvariable lim -text $lim

	LabelEntry .write.1.fname -relief sunken -borderwidth 3 -width 76\
      -label "conf fname:  " -helptext "Enter conf filename" \
      -textvariable fname -text $fname
	
	Button .write.1.fnbrowse -text "Browse..." -helptext "Open dialog to select conf file" \
      -command {
		set fname [tk_getSaveFile -title "set conf file" \
			-filetypes {
				{{Conf files} {.conf}	}
				{{.i files}   {.i}	} 
				{{ALL files}  {}	}
			}]         
      }
	
	LabelEntry .write.2.edb -relief sunken -borderwidth 3 -width 80\
      -label "edb:      " -helptext "Select edb filename" \
      -textvariable edbfn -text $edbfn
	
	Button .write.2.edbbrowse -text "Browse..." -helptext "Open dialog to select edb file" \
      -command {
		set edbfn [tk_getOpenFile -title "set edb file" -filetypes {{{edb index files} {.idx}}}]         
      }

	LabelEntry .write.3.pnav -relief sunken -borderwidth 3 -width 80\
      -label "PNAV:   " -helptext "Select PNAV filename" \
      -textvariable pnav -text $pnav
	
	Button .write.3.pnavbrowse -text "Browse..." -helptext "Open dialog to select PNAV file" \
      -command {
		set pnav [tk_getOpenFile -title "set PNAV file" -filetypes {{{PNAV files} {.ybin}}}]         
      }

	LabelEntry .write.4.imu -relief sunken -borderwidth 3 -width 80\
      -label "IMU:     " -helptext "Select IMU filename" \
      -textvariable imu -text $imu
	
	Button .write.4.imubrowse -text "Browse..." -helptext "Open dialog to select IMU file" \
      -command {
		set imu [tk_getOpenFile -title "set IMU file" \
			-filetypes {
				{{IMU files}  {.pbd}	}
				{{TANS files} {.ybin}	} 
			}]         
      }

	LabelEntry .write.5.map -relief sunken -borderwidth 3 -width 53\
      -label "map:     " -helptext "Select coastline map filename" \
      -textvariable map -text $map
	
	Button .write.5.mapbrowse -text "Browse..." -helptext "Open dialog to select coastline map file" \
      -command {
		set map [tk_getOpenFile -title "set map file" -filetypes {{{map files} {.pbd}}}]
      }
	
	label .write.5.limlab -text "Plot limits:"

	ComboBox .write.5.lim -text "From GGA" -width 11 -editable 0 -values \
		{
			From_GGA \
			From_map \
			From_window \
		} \
		-helptext "Select how to set limits for coastline map" \
		-modifycmd {
			set lim [.write.5.lim getvalue]
			puts $lim
			if {$lim == 0} {
				.write.5.win configure -state disabled
			}
			if {$lim == 1} {
				.write.5.win configure -state disabled
			}
			if {$lim == 2} {
				.write.5.win configure -state normal
			}
		}

	SpinBox .write.5.win  \
        -range {1 7 1} \
        -textvariable win \
        -helptext "Window to take limits" \
        -width 1
	
   set win   6
	.write.5.win configure -state disabled	

	LabelEntry .write.6.ops -relief sunken -borderwidth 3 -width 80\
      -label "opsconf:" -helptext "Select ops_conf filename. File should set correct ops_conf settings on #include" \
      -textvariable ops -text $ops
	
	Button .write.6.opsbrowse -text "Browse..." -helptext "Open dialog to select ops_conf file" \
      -command {
		set ops [tk_getOpenFile -title "set ops_conf file" -filetypes {{{ops_conf file} {.i}} {{ops_conf files} {.conf} }}]
      }

	label .write.7.batl -text "Bathy settings: "	

	ComboBox .write.7.bat -text "N/A (veg data)" -width 15 -editable 0 -values \
		{
			"N/A (veg data)" \
			Bays \
			Clear \
			Crappy \
			SuperShallow \
			"From file:" \
		} \
		-helptext "Select laser settings of bathymetry data" \
		-modifycmd {
			set bat [.write.7.bat getvalue]
			puts $bat
			if {$bat == 0} {
				.write.7.batf configure -state disabled
				.write.7.batfbrowse configure -state disabled
			}
			if {$bat == 1} {
				.write.7.batf configure -state disabled
				.write.7.batfbrowse configure -state disabled
			}
			if {$bat == 2} {
				.write.7.batf configure -state disabled
				.write.7.batfbrowse configure -state disabled
			}
			if {$bat == 3} {
				.write.7.batf configure -state disabled
				.write.7.batfbrowse configure -state disabled
			}
			if {$bat == 4} {
				.write.7.batf configure -state disabled
				.write.7.batfbrowse configure -state disabled
			}
			if {$bat == 5} {
				.write.7.batf configure -state normal
				.write.7.batfbrowse configure -state normal
			}
		}
	
	LabelEntry .write.7.batf -relief sunken -borderwidth 3 -width 55\
      -helptext "Select bathy settings filename. File should set correct ops_conf settings on #include" \
      -textvariable batfs -text $batfs
	
	Button .write.7.batfbrowse -text "Browse..." -helptext "Open dialog to select bathy settings file" \
      -command {
		set batfs [tk_getOpenFile -title "set bathy settings file" -filetypes {{{bathy settings files} {.conf .bctl}}}]
      }
				
	.write.7.batf configure -state disabled
	.write.7.batfbrowse configure -state disabled
	
	LabelEntry .write.8.oth -relief sunken -borderwidth 3 -width 80\
      -label "other:    " -helptext "Select other settings filename. File should set correct ops_conf settings on #include" \
      -textvariable oth -text $oth
	
	Button .write.8.othbrowse -text "Browse..." -helptext "Open dialog to select other settings file" \
      -command {
		set oth [tk_getOpenFile -title "set other settings file" -filetypes {{{other settings files} {*}}}]
      }

	Button .write.9.write -text "Write Conf File..." -helptext "Write configuration file" \
		-command {
			exp_send "write_conf(\"$fname\",\"$edbfn\",\"$pnav\",\"$imu\",\"$map\",$lim,$win,\"$ops\",$bat,\"$batfs\",\"$oth\")\r"
			expect ">"
			tk_messageBox -icon info -message "Configuration file written" -type ok -title "Finished"			
		}

	Button .write.9.dismiss -text "Dismiss" -helptext "Close this window" \
		-command {
			destroy .write
		}

	pack .write.1.fname .write.1.fnbrowse -side left
	pack .write.2.edb .write.2.edbbrowse -side left 
	pack .write.3.pnav .write.3.pnavbrowse -side left 
	pack .write.4.imu .write.4.imubrowse -side left
	pack .write.5.map .write.5.mapbrowse .write.5.limlab .write.5.lim .write.5.win -side left
	pack .write.6.ops .write.6.opsbrowse -side left
	pack .write.7.batl .write.7.bat .write.7.batf .write.7.batfbrowse -side left
	pack .write.8.oth .write.8.othbrowse -side left
	pack .write.9.write .write.9.dismiss -side left
}


   exp_send "include, \"confload.i\";\r"
   expect ">"

   set data "Configuration file contents will appear here"

   if { [info exists path ] == 0 } {
      set path "/"
   }
   
   if { [info exists conflist ] == 0 } {
      set conflist "..."
   }

   destroy  .conf
   toplevel .conf
   wm title .conf "Load conf files"

   foreach x {1 2 3 4 5 6} {
      frame .conf.$x -relief groove -borderwidth 3
      pack .conf.$x -side top
   }

   LabelEntry .conf.1.path -relief sunken -borderwidth 3 \
      -label "Path:  " -helptext "Enter path to raw data" \
      -textvariable path -text $path

   Button .conf.1.pathbutton -text "Browse..." -helptext "Open dialog to select path" \
      -command {
         global path
         set path [ tk_chooseDirectory -initialdir $path -mustexist 1 -title "Raw Data Directory" ]/
      }


   Button .conf.1.getbutton -text "Get confs" -helptext "Find *.conf files in path" \
      -command {
	global conflist path
	exp_send "confload(\"$path\")\r"
	expect ">"
	destroy .conf.1.cb
	ComboBox .conf.1.cb -values $conflist -helptext "Select a configuration file" -editable 0 \
	 -modifycmd {
            global conflist path
            set curconf $path[lindex $conflist [.conf.1.cb getvalue]]
	    set fp [open $curconf r]
	    set data [read $fp]
	    close $fp
	 }
	pack .conf.1.cb .conf.1.loadbutton .conf.1.writebutton .conf.1.dismiss .conf.1.hide -side left

       }

   Button .conf.1.writebutton -text "Write Conf" -helptext "Open GUI to write conf" \
      -command write_conf

   Button .conf.1.dismiss -text "Dismiss" -helptext "Close this window" -command {destroy .conf}
   
   checkbutton .conf.1.hide -text "hide conf" -variable hidemessage \
	-command {
		if {$hidemessage == 0} {
			pack .conf.2
		}
		if {$hidemessage == 1} {
			pack forget .conf.2
		}
	}	

   Button .conf.1.loadbutton -text "Load conf" -helptext "Load selected *.conf file" \
	-command {
	   global path curconf
	   exp_send "load_this_conf(\"$curconf\")\r"
	   exp_send "#include \"l1pro.i\"\r"
	   expect ">"
	}

   message .conf.2.message -font {Courier 12} -textvariable data -width 800 -text "" 

   pack .conf.1.path .conf.1.pathbutton .conf.1.getbutton .conf.1.writebutton .conf.1.dismiss .conf.1.hide -side left
   pack .conf.2.message
	

