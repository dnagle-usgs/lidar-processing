exp_send "require, \"rbgga.i\"\r"

proc rbgga_menu { {mode "eaarl"} } {
### DEPRECATED 2009-02-02 ###
# The rbgga_menu code has been superseded by plot.ytk. It is possible, however,
# that some of the other code in this file may still be in non-deprecated use.
 global ytk_PLMK_marker data_path _map _ytk utm rbgga_mode rbgga_file_mode
 set gga(null) ""
 set mw .rbgga
 set rbgga_mode $mode
 set rbgga_file_mode "eaarl"
 destroy $mw
 toplevel $mw
 if {[string equal $rbgga_mode "adapt"]} {
    wm title $mw "Vessel Tracks"
 } else {
    wm title $mw "eaarl.rbgga: "
 }
 frame $mw.g1 -relief groove -borderwidth 3
 label $mw.g1.lulb -text "Coordinates:" -anchor e
 tk_optionMenu $mw.g1.lu gga(llu) latlon utm
 grid $mw.g1.lulb $mw.g1.lu -sticky ew

 label $mw.g1.lwlb -text "Line Width:" -anchor e
 tk_optionMenu $mw.g1.lw   gga(linewidth) 1 3 5 7 10 12 15 20 25
 grid $mw.g1.lwlb $mw.g1.lw -sticky ew

 label $mw.g1.lclb -text "Line Color:" -anchor e
 tk_optionMenu $mw.g1.lc   gga(linecolor)  red black blue green cyan magenta yellow white
 grid $mw.g1.lclb $mw.g1.lc -sticky ew

 label $mw.g1.skiplb -text "Points to skip:" -anchor e
 tk_optionMenu $mw.g1.skip gga(skip) 0 1 2 5 10 15 20 25 50 75 100  
 grid $mw.g1.skiplb $mw.g1.skip -sticky ew

# label $mw.g1.markerslb -text "Use Markers:" -anchor e
# tk_optionMenu $mw.g1.markers gga(markers) Yes No
# grid $mw.g1.markerslb $mw.g1.markers -sticky ew

 label $mw.g1.mshapelb -text "Marker shape:" -anchor e
 tk_optionMenu $mw.g1.mshape gga(mshape) None Square Cross \
	Triangle Circle Diamond Cross45 "Inverted-Triangle"
 grid $mw.g1.mshapelb $mw.g1.mshape -sticky ew

 label $mw.g1.msizelb -text "Marker size:" -anchor e
 tk_optionMenu $mw.g1.msize gga(msize) .1 .2 .3 .4 .5 \
	.6 .7 1.0 1.5 2.0 2.5 3.0 5.0 10.0 

 grid $mw.g1.msizelb $mw.g1.msize -sticky ew

 set _map(window) 6
 Label $mw.g1.owinlbl -text "in Win:"
 SpinBox $mw.g1.owin -justify center -range {0 63 1} \
         -width 2 -textvariable _map(window)

 grid $mw.g1.owinlbl $mw.g1.owin -sticky ew


 frame $mw.f1 -relief groove -borderwidth 3
 if {[string equal $rbgga_mode "adapt"]} {
   button $mw.f1.loadadf -text "Load ADF" -command { 
     if {$gga(llu) == "utm"} {
        set utm 1
     } else {
        set utm 0
     }
     exp_send "gga=open_vessel_track()\n"
     set rbgga_file_mode "adapt"
   }
 }
 button $mw.f1.load -text "Load PNAV" -command { 
   if {$gga(llu) == "utm"} {
      set utm 1
   } else {
      set utm 0
   }
   exp_send "pnav=rbpnav();\r" 
   set rbgga_file_mode "eaarl"
 }
 button $mw.f1.plot -text "Plot" -command {
   if { $gga(mshape) == "None" } {
      set marker ",marker=0";
   } else {
      set marker ",marker=$ytk_PLMK_marker($gga(mshape))"
   }
   if {$gga(llu) == "utm"} {
      set utm 1
   } else {
      set utm 0
   }
   if { [string equal $rbgga_file_mode "adapt"] } {
    exp_send "show_vessel_track, color=\"$gga(linecolor)\", skip=$gga(skip)$marker, msize=$gga(msize), utm=$utm, win=$_map(window), width=$gga(linewidth); \n\r" 
   } else {
    exp_send "show_gga_track, color=\"$gga(linecolor)\", skip=$gga(skip)$marker,msize=$gga(msize), utm=$utm, win=$_map(window), width=$gga(linewidth); \n\r" 
   }
    expect ">"
    exp_send "\n"
    expect ">"
    exp_send "utm= $utm; \r"
    expect ">"
 }
 button $mw.f1.info -text "Info"
 button $mw.f1.fma -text "Fma" -command { exp_send "window,$_map(window); fma\r\n" }
 button $mw.f1.jump -text "Jump" -command { 
   exp_send "wsav=current_window();window,$_map(window); gga_click_start_isod()\n" 
   #tk_messageBox  -message "Click using left mouse button over a section 
 #of a flightline in Yorick window-6."  -type ok
   expect "region_selected"
   exp_send "window_select,wsav\r"
 }
 button $mw.f1.limits -text "Limits" \
	-command { exp_send "window,$_map(window); limits\r\n" }
 button $mw.f1.dismiss -text "Dismiss" -command "destroy $mw "
if {[string equal $rbgga_mode "eaarl"]} {
 pack $mw.f1.load $mw.f1.plot $mw.f1.info $mw.f1.limits \
	$mw.f1.fma $mw.f1.jump -side top -fill x
} else {
 pack $mw.f1.loadadf $mw.f1.load $mw.f1.plot $mw.f1.limits \
	$mw.f1.fma $mw.f1.jump -side top -fill x
}
 pack $mw.f1.dismiss -side bottom -anchor s -fill both

 frame $mw.f2 -relief groove -borderwidth 3
 label $mw.f2.title -text "Map controls"
 button $mw.f2.mapredraw  -text "Replot" -command {
   if {$gga(llu) == "utm"} {
      set utm 1
   } else {
      set utm 0
   }
   plot_last_map $utm 
 }
 button $mw.f2.mapload    -text "Load" -command {
   if {$gga(llu) == "utm"} {
      set utm 1
   } else {
      set utm 0
   }
   load_map $utm 
 }

 set w $mw.f2
Button $w.overlay_grid -text "Overlay\nGrid" -command {
  exp_send "draw_grid, $_map(window)\r"
}

Button $w.show_grid -text "Show\nGrid Name" -command {
  exp_send "show_grid_location, $_map(window)\r"
}


 pack  $mw.f2.title -side top
 pack  \
	$mw.f2.mapload \
	$mw.f2.mapredraw \
        $w.overlay_grid \
        $w.show_grid \
	-fill both -expand 1 -side left

 frame $mw.f3 -relief groove -borderwidth 3
 button $mw.f3.fpload    -text "Load" -command {
    load_fp
 }
 label $mw.f3.title -text "Flight Plans"

 pack $mw.f3.title -side top
 pack $mw.f3.fpload -side left
### pack $mw.f3 -side bottom -anchor n -fill both -expand 1


 pack $mw.f3 -side bottom -expand 1 -fill both
 pack $mw.f2 -side bottom -expand 1 -fill both
 pack $mw.f1 $mw.g1 -side left -anchor n -fill both -expand 1

}


proc request_heading {psf inhd_count sod} {
   ## this procedure requests heading information for sf_a.tcl
   ## amar nayegandhi
   global sf_pid
   set sf_pid $psf
   exp_send "pkt_sf = prepare_sf_pkt($sod, $psf); \r"
}

proc mark_time_pos { sod } {
  global _map
  exp_send "mark_time_pos, $_map(window), $sod\r"
}


proc mark_pos { lat lon } {
  global utm _map rbgga_mode
  if { [string equal $rbgga_mode "adapt"] } {
	  set d [expr {int($lat / 100.0)}]
	  set m [expr {fmod($lat, 100.0)/60.0}]
	  set lat [expr {$d + $m}]
	  set d [expr {int($lon / 100.0)}]
	  set m [expr {fmod($lon, 100.0)/60.0}]
	  set lon [expr {$d + $m}]
  } else {
	  scan $lat "%1s%2f%f" df dd mm
	  set lat [ expr $dd + $mm/60.0 ]
	  if { $df == "S" } {
	    set lat [ expr -$lat ]
	  }
	  scan $lon "%1s%3f%f" df dd mm
	  set lon [ expr $dd + $mm/60.0 ]
	  if { $df == "W" } {
	    set lon [ expr -$lon ]
	  }
  }
  if {$utm == 0} {
  exp_send "wsav=current_window();window,$_map(window); plmk, $lat, $lon, msize=.5, marker=1, color=\"red\"; window_select,wsav\r"
  } else {
  exp_send "ll2utm, $lat, $lon; \r"
  expect ">"
  exp_send "wsav=current_window();window,$_map(window); plmk, UTMNorthing, UTMEasting, msize=.5, marker=1, color=\"red\"; window_select,wsav\r"
  }
}


