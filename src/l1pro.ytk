
#
# $Id$
#
# Orginal Amar Nayegandhi aka "anayegan"

  set ofname ""
  set win_no 		5
  set msize 		1.0
  set usecentroid   	1
  set hist_log		1

exp_send "#include \"geo_bath.i\"\r"; # load geobath.i code
exp_send "#include \"read_yfile.i\"\r"; # load read_yfile
expect ">";

package require BWidget
destroy .l1wid

toplevel .l1wid
frame .l1wid.bf1
frame .l1wid.bf2
frame .l1wid.bf2.utm
frame .l1wid.bf3
frame .l1wid.bf4 
frame .l1wid.bf4.1
frame .l1wid.bf4.2
frame .l1wid.bf45 -relief groove -borderwidth 3
frame .l1wid.bf45.sc -relief groove -borderwidth 3
frame .l1wid.bf45.p -relief groove -borderwidth 3
frame .l1wid.bf5 

.l1wid configure -menu .l1wid.mb
menu .l1wid.mb
menu .l1wid.mb.file
menu .l1wid.mb.load
menu .l1wid.mb.options
.l1wid.mb   add cascade -label File -underline 0 -menu .l1wid.mb.file

.l1wid.mb.file add command -label "Read Data File... " -underline 5 -command {
  	exp_send "data_ptr = read_yfile(); \r"
	expect ">"
  }
	

.l1wid.mb.file  add command -label "Read command file .. " -underline 0 

.l1wid.mb.file add command -label "Save command file .. " -underline 0

.l1wid.mb.file add command -label "Dismiss" -underline 0 -command {destroy .l1wid}

.l1wid.mb add cascade -label Load -underline 0 -menu .l1wid.mb.load

.l1wid.mb.load add command -label "Load TANS Data .. " -underline 5 \
		-command { exp_send "tans = rbtans();\r" 
			   expect ">"
			 }

.l1wid.mb.load add command -label "Load PNAV Data .. " -underline 5 \
		-command { exp_send "pnav = rbpnav(); \r"
			 }

.l1wid.mb.load add command -label "Initialize structure BATHCTL .." -underline 21 \
		-command { exp_send "type = define_bath_ctl(junk); \r"
			 }


.l1wid.mb add cascade -label Options -underline 0 -menu .l1wid.mb.options
.l1wid.mb.options add command -label "Configure elevation scale limits..." -underline 0 \
	-command { 
	   destroy  .l1wid-opts
 	   toplevel .l1wid-opts
	   frame .l1wid-opts.f1
	   frame .l1wid-opts.f2
	   frame .l1wid-opts.f3
	   Label .l1wid-opts.f1.label -text "Maximum:" 
	   Label .l1wid-opts.f2.label -text "Minimum:" 
	   Label .l1wid-opts.f3.label -text "Increment:" 
	   SpinBox  .l1wid-opts.f1.max -range { -100. 5000. 10. }  \
		-textvariable cmax_max \
		-modifycmd {  .l1wid.bf45.sc.1 configure -to $cmax_max }
	   SpinBox  .l1wid-opts.f2.min -range { -100. 5000. 10. }  \
                -textvariable cmax_min \
                -modifycmd {  .l1wid.bf45.sc.1 configure -from $cmax_min }
	   SpinBox  .l1wid-opts.f3.inc \
		-values { 0.1 0.2 .25 .5 .75 1.0 1.5 2.0 2.5 3 4 5 6 7 8 9 10 15 20 25 }  \
                -textvariable cmax_inc \
                -modifycmd {  .l1wid.bf45.sc.1 configure -resolution $cmax_inc }

	   pack .l1wid-opts.f1.label .l1wid-opts.f1.max -side left -fill x
	   pack .l1wid-opts.f2.label .l1wid-opts.f2.min -side left -fill x
	   pack .l1wid-opts.f3.label .l1wid-opts.f3.inc -side left -fill x
	   pack .l1wid-opts.f1 .l1wid-opts.f2 .l1wid-opts.f3 -side top -anchor e
         }
.l1wid.mb.options add checkbutton -label "Log Historgrams" -underline 0 \
	-variable hist_log \
	-command {
       exp_send "_win=window();window,7;\
  logxy,0,$hist_log; range,$hist_log;window,_win \r"
	}


ComboBox .l1wid.bf4.1.d -text "Define Region using..." -width 22 -values "Rubberband-Box Points-in-Polygon Line-Segment Enter_Rectangular_Coordinates" -helptext "Select region to process using any of the following methods" -editable 0 -modifycmd {
    set defr [.l1wid.bf4.1.d getvalue]
    puts $defr
    if {$defr == 0} {
       	tk_messageBox  -icon info \
        -message "Drag a Rectangular Box in Window 6 to define region." \
        -type ok -title "Message"
       exp_send "q = gga_win_sel(2,latutm=1);\r"
       expect ">"
    }
    if {$defr == 1} {
       	tk_messageBox  -icon info \
        -message "Draw a Polygon in Window 6 to define a region using a series of left mouse clicks.  To complete the polygon, hit <Ctrl> and left mouse click." \
        -type ok -title "Message"
       exp_send "q = gga_pip_sel(1);\r"
       expect ">"
    }
    if {$defr == 2} {
       exp_send "q = gga_click_sel(1);\r"
       expect ">"
    }
    if {$defr == 3} {
        destroy .l1widc
        toplevel .l1widc
	frame .l1widc.lon
	frame .l1widc.1
	frame .l1widc.utm
	ComboBox .l1widc.utm.1 -text "Coordinate System" -width 18 -values "LatLon UTM" \
		-helptext "Select the Coordinate System." -editable 0 
	LabelEntry .l1widc.utm.2 -width 6 -relief sunken  -label "UTM Zone: " -helptext "Enter UTM Zone Here" \
		-textvariable zone 

	LabelEntry .l1widc.lat1 -width 12 -relief sunken -label "NorthLat/Max.Northing " \
		-helptext "Enter Maximum Latitude in degrees or Maximum UTM Northing in meters Here"\
		-textvariable mxlat
	LabelEntry .l1widc.lat2 -width 12 -relief sunken -label "SouthLat/Min.Northing  " \
		-helptext "Enter Minimum Latitude in degrees or Minimum UTM Northing in meters Here"\
		-textvariable mnlat

	LabelEntry .l1widc.lon.mn -width 12 -relief sunken -label "WestLon/Min.Easting  " \
		-helptext "Enter Westernmost Longitude in degrees or Minimum UTM Easting in meters Here"\
		-textvariable mnlon
	LabelEntry .l1widc.lon.mx -width 12 -relief sunken -label "EastLon/Max.Easting " \
		-helptext "Enter Easternmost Longitude in degrees or Maximum UTM Easting in meters Here"\
		-textvariable mxlon
	Button .l1widc.1.ok -text "OK" -width 5 -command {
          set utm [.l1widc.utm.1 getvalue]
	  destroy .l1widc
	}
	Button .l1widc.1.box -text "Plot Region" -width 7 -command {
	   exp_send "a_x=\[$mnlon, $mxlon, $mxlon, $mnlon, $mnlon\];\r"
	   exp_send "a_y=\[$mnlat, $mnlat, $mxlat, $mxlat, $mnlat\];\r"
	   exp_send "plg, a_y, a_x;\r";
	}

	  
	Button .l1widc.1.cancel -text "Cancel" -width 5 -command {
	  destroy .l1widc
	}
	pack .l1widc.utm.1 .l1widc.utm.2 -side left 
	pack .l1widc.lon.mn .l1widc.lon.mx -side left -padx 4
	pack .l1widc.utm .l1widc.lat1 .l1widc.lon .l1widc.lat2 -side top -pady 5
	pack .l1widc.1.ok .l1widc.1.box .l1widc.1.cancel -side left
	pack .l1widc.1 -side top


   }
   if {$defr == -1} {
	error "Please Define Region."
   }
} 

ComboBox .l1wid.bf4.1.p -text "Process Data For" -width 22 -values \
	"SubAerial-Topography Submerged-Bathymetry Vegetation" \
	-helptext "Process Data for any of the following" \
	-editable 0 

.l1wid.bf4.1.p setvalue first

checkbutton .l1wid.bf4.2.cll -text "Convert UTM\nto Lat Lon" -variable cll 
checkbutton .l1wid.bf4.2.cng -text "Convert to\nNAVD 88 (GEOID)" -variable cng 
checkbutton .l1wid.bf4.2.cen -text "Correct Range \nWalk with Centroid" -variable usecentroid 


checkbutton .l1wid.bf45.p.fma -text "Auto\nFma" -variable l1pro_fma 

Button .l1wid.bf45.p.1 -text "Plot" -command {
 global l1pro_fma
     #fill in later using what to plot
     set fs 0
     set ba 0
     set de 0
     set disp_type [.l1wid.bf45.p.5 getvalue]
     if {$disp_type == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of data to display!" \
        -type ok
     }
     if {$disp_type == 0} { set fs  1}
     if {$disp_type == 1} { set ba  1}
     if {$disp_type == 2} { set de  1}
     if {$disp_type == 3} { set veg  1}
     if {$disp_type == 4} { set fint 1}
     if {$disp_type == 5} { set lint 1}
     set ptype [.l1wid.bf4.1.p getvalue]
     if {$ptype == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of processed data i.e. topo, bathy or veg!" \
        -type ok
     } else {
         if { $l1pro_fma } {
	   exp_send "window,$win_no; fma;\r";
	 }
     }

     set cmax [ expr $cmin + $cdelta ]
     if {$ptype == 0} {
       set cmax1 [expr $cmax*100.]
       set cmin1 [expr $cmin*100.]
       if {$disp_type == 0} {
         exp_send "display, fs_all, win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, edt=1;\r"
         expect ">"
         exp_send "colorbar, $cmin, $cmax;\r"
         expect ">"
       }
     }
     if {$ptype == 1} {
       exp_send "plot_bathy, depth_all, win=$win_no, ba=$ba, fs = $fs, de = $de , cmin=$cmin, cmax=$cmax, msize = $msize; \r"
       expect ">"
       }
}

Label .l1wid.bf45.p.2 -text "in Win:"
SpinBox .l1wid.bf45.p.3 -justify center -range {0 7 1} \
	-width 2 -textvariable win_no 

### Label .l1wid.bf45.p.4 -text "to display"
ComboBox .l1wid.bf45.p.5 -text "Display Type" -width 20 -values \
	"First_Return_Topography Sub-aqueous_Topography \
	Water_Depth Bare_Earth_Topography" \
	-helptext "Select any one of the following" \
	-editable 0
.l1wid.bf45.p.5 setvalue first
#listbox .l1wid.bf45.5 -height 1 -yscrollcommand ".l1wid.bf45.scrl set" -width 24
#scrollbar .l1wid.bf45.scrl  -command ".l1wid.bf45.5 yview"
#.l1wid.bf45.5 insert end "First Surface Topography"
#.l1wid.bf45.5 insert end "Sub-aqueous Topography"
#.l1wid.bf45.5 insert end "Water Depth"
#.l1wid.bf45.5 insert end "Bare Earth Topography"

Button .l1wid.bf45.p.7 -text "Histogram\nElevations" \
  -helptext "Generate and display a histogram of all the first return elevations" \
  -command {
      exp_send "hst = hist_fs(fs_all); \r"
  }

Button .l1wid.bf45.p.6 -text "Pixel\nWaveform" \
  -helptext "Click to jump to raster, pulse, and image for xyz point" \
  -command {
     set ptype [.l1wid.bf4.1.p getvalue]
     set disp_type [.l1wid.bf45.p.5 getvalue]
     if {$disp_type == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of data before using this function!" \
        -type ok
     }
     if {$ptype == 0} {
        exp_send "raspulsearch(fs_all, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type);\r"
     }
     if {$ptype == 1} {
        exp_send "raspulsearch(depth_all, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type);\r"
     }
   }
	   

scale .l1wid.bf45.sc.1 -orient horizontal \
	-label "Lowest ColorBar Elevation (m)" \
	-variable cmin \
	-from -50. -to 1000. \
	-resolution 0.5 \
	-digits 6 \
	-length 160

proc dscale {v} {
global cmin cdelta; 
  .l1wid.bf45.sc.2 configure -label "Highest Elevation [ expr $cmin + $cdelta]m"
}

scale .l1wid.bf45.sc.2 -orient horizontal \
	-variable cdelta \
	-from 0. -to 100 \
	-resolution 0.25 \
	-digits 6 \
	-length 160 \
	-command dscale ;
scale .l1wid.bf45.sc.3 -orient horizontal \
	-label msize \
	-variable msize \
	-from 0 -to 5 \
	-resolution 0.25 \
	-length 100

Button .l1wid.bf5.1 -text "Write Datafile" -width 20 \
		-command {
	destroy .l1wid1
        toplevel .l1wid1
	frame .l1wid1.1
        set ptype [.l1wid.bf4.1.p getvalue]
	LabelEntry .l1wid1.op  -width 70 -relief sunken -bd 3 -label "Opath:  " -helptext "Enter Output File Path Here" \
		-textvariable opath

	LabelEntry .l1wid1.of  -width 70 -relief sunken -bd 3 -label "Ofname: " \
		-helptext "Enter Output File Name for GOOD Data Here" \
		-textvariable ofname

	Button .l1wid1.1.ok -text "OK" -width 5 -command {
    	  if { ![ string equal  "" $ofname ] } {
 	    if {$ptype == 0} {
 	     exp_send "write_topo, \"$opath\", \"$ofname\", fs_all; \r";
	     expect ">"
	    }
 	    if {$ptype == 1} {
      	     exp_send "write_bathy, \"$opath\", \"$ofname\", depth_all; \r";
	     expect ">"
	    }
	     destroy .l1wid1
    	  } else { 
       	    tk_messageBox  -icon warning \
            -message "You need to specify an output file name" \
            -type ok
          }
        }
 
 	Button .l1wid1.1.cancel -text "Cancel" -width 5 -command {
	   destroy .l1wid1
 	}
	pack .l1wid1.1.ok .l1wid1.1.cancel -side left -padx 5
	pack .l1wid1.op .l1wid1.of .l1wid1.1 -side top -pady 5	
  }

Button .l1wid.bf5.2 -text "Process Now" -width 20 \
		-command {
	 exp_send "utm = $utm\n"
	 set ptype [.l1wid.bf4.1.p getvalue]
         set defr [.l1wid.bf4.1.d getvalue]
	 exp_send "ptype = $ptype\n\r"
	 if {$defr == 3} {
	  exp_send "q = gga_win_sel(2, win=6, llarr=\[$mnlon, $mxlon, $mnlat, $mxlat\]);\r"
	 }
          #exp_send "make_bathy, opath=\"$opath\", ofname=\"$ofname\",\
          #    ext_bad_att=$xba, ext_bad_depth=$xbd, latutm = 1, llarr=\[$mnlon,\
          #    $mxlon, $mnlat, $mxlat\];\r"
	 if {$ptype == 0} {
	    exp_send "fs_all = make_fs(latutm=1, q=q, ext_bad_att=1, usecentroid=$usecentroid);\r"
	    expect ">"
	 }
	 if {$ptype == 1} {
           exp_send "depth_all = make_bathy(latutm = 1, q = q, ext_bad_depth=1, ext_bad_att=1);\r"
	   expect ">"
	 }
              
 }


#pack  .l1wid.bf2.utm.1 .l1wid.bf2.utm.2 -side left 
#pack .l1wid.bf2.op  .l1wid.bf2.of .l1wid.bf2.utm -side top -pady 8
#pack .l1wid.bf2.utm -side top -pady 8
#pack .l1wid.bf3.lon.but.1 .l1wid.bf3.lon.but.2 -side top -padx 4
#pack .l1wid.bf3.lon.mn .l1wid.bf3.lon.mx -side left -padx 4
#pack .l1wid.bf3.lat1 .l1wid.bf3.lon .l1wid.bf3.lat2 -side top -pady 5
#pack  .l1wid.bf4.1.cb .l1wid.bf4.1.xba .l1wid.bf4.1.xbd .l1wid.bf4.1.xbv -side top -padx 20 -pady 5
#pack  .l1wid.bf4.1 -side top -padx 20 -pady 5
pack .l1wid.bf4.1.d .l1wid.bf4.1.p -side left -padx 5
pack  .l1wid.bf4.2.cll .l1wid.bf4.2.cng .l1wid.bf4.2.cen -side left -padx 3
pack .l1wid.bf4.1 .l1wid.bf4.2 -side top -pady 3
pack .l1wid.bf5.1 .l1wid.bf5.2 -side right
pack .l1wid.bf1 .l1wid.bf2 .l1wid.bf3 .l1wid.bf4 -side top -expand 1 -fill both
pack .l1wid.bf45.sc.1 .l1wid.bf45.sc.2 .l1wid.bf45.sc.3 -side left  -padx 3
pack 	.l1wid.bf45.p.fma \
	.l1wid.bf45.p.1 \
	.l1wid.bf45.p.5 \
	.l1wid.bf45.p.2 \
	.l1wid.bf45.p.3 \
	.l1wid.bf45.p.6 \
	.l1wid.bf45.p.7 \
	-side left -fill x  -padx 2
pack .l1wid.bf45.p .l1wid.bf45.sc  -side top -fill x -expand 1
pack .l1wid.bf5 .l1wid.bf45  -side top -pady 3 

proc send_latlon_to_l1pro {minlon maxlon minlat maxlat utm} {
   global mnlon mxlon mnlat mxlat 
   .l1widc.utm.1 setvalue @$utm
   set mnlon $minlon
   set mxlon $maxlon
   set mnlat $minlat
   set mxlat $maxlat
}





