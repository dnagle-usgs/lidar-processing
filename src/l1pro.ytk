# vim: set ts=2 sts=2 sw=2 ai sr et:
#
# For info on using the Bwidget NoteBoook see:  http://mini.net/tcl/2298
#

# plot_settings
# var_settings

package require BWidget
package require Tktable
package require struct::list
package require struct::set
package require misc
package require mixin
package require tooltip
package require wrappack

#load all yorick support functions
ybkg require \"l1pro.i\"

if {![info exists l1pro_data]} {
  set l1pro_data(mode_mapping) [lrange {
    "First Return Topography"  fs
    "Submerged Topography"     ba
    "Water Depth"              de
    "Bare Earth Topography"    be
    "Surface Amplitude"        fint
    "Bottom Amplitude"         lint
    "Canopy Height"            ch
  } 0 end]

  set outvar ""

  set cbar_locked cdelta

  set rcf_buf_rgn 0; #Used in proc filter_replace
  set l1pro_fma 1
  set l1pro_triag 0
  set skip 1

  set gridtype grid

  set data_file_path $data_path

  set varlist {fs_all depth_all veg_all cveg_all workdata}

  set cdelta 80
  set var_common [list \
    win 5 \
    cmin -40.00 \
    cmax 40.00 \
    msize 1.0 \
    mtype 1]

  set var_settings(fs_all) [linsert $var_common end \
    var fs_all \
    display_mode fs]

  set var_settings(depth_all) [linsert $var_common end \
    var depth_all \
    display_mode ba]

  set var_settings(veg_all) [linsert $var_common end \
    var veg_all \
    display_mode be]

  set var_settings(cveg_all) [linsert $var_common end \
    var cveg_all \
    display_mode fs]

  set var_settings(workdata) [linsert $var_common end \
    var workdata \
    display_mode ba]

  unset var_common

  set pro_var fs_all
  array set plot_settings $var_settings($pro_var)

  set _map(window) 4

  # Compatibility: We want to keep the window setting in ::plot_settings(win),
  # but there's a ton of code that refers to ::win_no.
  upvar #0 ::plot_settings(win) ::win_no

  array set cbvc {cmin cmin cmax cmax msize msize mtype mtype}

  set cbv 0
  set cbvc(cmin) $plot_settings(cmin)
  set cbvc(cmax) $plot_settings(cmax)
  set cbvc(msize) $plot_settings(msize)
  set cbvc(mtype) $plot_settings(mtype)

  set constant_win_no 0
  set l1pro_square_limits 1

  trace remove variable pro_var write pro_var_changed
  trace add variable pro_var write pro_var_changed

  trace remove variable plot_settings(cmin) write cbar_trace
  trace remove variable plot_settings(cmax) write cbar_trace
  trace remove variable cdelta write cbar_trace

  trace add variable plot_settings(cmin) write cbar_trace
  trace add variable plot_settings(cmax) write cbar_trace
  trace add variable cdelta write cbar_trace
}

# Some of the l1pro packages require the above variables, so this must come
# after they exist
package require l1pro

proc append_varlist {newvar} {
  global varlist
  if {[lsearch -exact $varlist $newvar] == -1} {
    lappend varlist $newvar
    init_var_settings $newvar
  }
}

proc delete_varlist {delvar} {
  global varlist
  set idx [lsearch -exact $varlist $delvar]
  if {$idx != -1} {
    if {$::pro_var eq $delvar} {
      if {$idx < [llength $varlist]-1} {
        set ::pro_var [lindex $varlist [expr {$idx+1}]]
      } else {
        set ::pro_var [lindex $varlist [expr {$idx-1}]]
      }
    }
    set varlist [lreplace $varlist $idx $idx]
  }
}

proc rename_varlist {old new} {
  set new [yorick::sanitize_vname $new]
  set idx [lsearch -exact $::varlist $old]
  if {$idx == -1} {
    append_varlist $new
    return
  }
  set ::varlist [lreplace $::varlist $idx $idx $new]
  if {[info exists ::plot_settings($old)]} {
    if {![info exists ::plot_settings($new)]} {
      set ::plot_settings($new) $::plot_settings($old)
    }
  }
  if {$::pro_var eq $old} {
    set ::pro_var $new
  }
}

proc init_var_settings {var args} {
  dict set ::var_settings($var) var $var
  set settings [array get ::plot_settings]
  foreach {key val} [array get ::plot_settings] {
    if {![dict exists $::var_settings($var) $key]} {
      dict set ::var_settings($var) $key $val
    }
  }
}

proc pro_var_changed {a b c} {
  global var_settings plot_settings pro_var cbv win_no constant_win_no
  init_var_settings $plot_settings(var)

  # Currently saved version -- to be replaced
  set stored $var_settings($plot_settings(var))

  # Update display_mode
  dict set stored display_mode $plot_settings(display_mode)

  # Update cbar if appropriate
  if {$cbv == 0} {
    foreach key {cmin cmax msize mtype} {
      dict set stored $key $plot_settings($key)
    }
  }

  # Update win_no if appropriate
  if {$constant_win_no == 0} {
    dict set stored win $win_no
  }

  # Replace saved version with new values
  set var_settings($plot_settings(var)) $stored

  # Load stored settings to be used
  if {[info exists var_settings($pro_var)]} {
    set stored $var_settings($pro_var)
  } else {
    set stored [array get plot_settings]
  }

  # Update display_mode
  set plot_settings(var) $pro_var
  set plot_settings(display_mode) [dict get $stored display_mode]

  # Update cbar if appropriate
  if {$cbv == 0} {
    foreach key {cmin cmax msize mtype} {
      set plot_settings($key) [dict get $stored $key]
    }
  }

  # Update win_no if appropriate
  if {$constant_win_no == 0} {
    set plot_settings(win) [dict get $stored win]
  }
}

proc cbar_trace { a b c } {
  set cmin [scan $::plot_settings(cmin) %f]
  set cmax [scan $::plot_settings(cmax) %f]
  set cdel [scan $::cdelta %f]
  switch -- $::cbar_locked {
    cmin {
      if {"" ni [list $cmax $cdel]} {
        set ::plot_settings(cmin) [format %.2f [expr {$cmax - $cdel}]]
      }
    }
    cmax {
      if {"" ni [list $cmin $cdel]} {
        set ::plot_settings(cmax) [format %.2f [expr {$cmin + $cdel}]]
      }
    }
    cdelta {
      if {"" ni [list $cmax $cmin]} {
        set ::cdelta [format %.2f [expr {$cmax - $cmin}]]
      }
    }
  }
  if { [ winfo exists .rem ] } {
    set ::min_thresh $::plot_settings(cmin)
    set ::max_thresh $::plot_settings(cmax)
  }
}

proc display_data args {
  array set opts [list -var $::pro_var -win $::win_no -fma $::l1pro_fma -title {}]
  array set opts $args

  set cmd "display_data, $opts(-var)"
  append cmd ", mode=\"$::plot_settings(display_mode)\""
  if {$::skip > 1} {
    append cmd ", skip=$::skip"
  }
  if {$::l1pro_triag} {
    append cmd ", triag=1"
  } else {
    append cmd ", msize=$::plot_settings(msize)"
    append cmd ", marker=$::plot_settings(mtype)"
  }
  append cmd ", win=$opts(-win)"
  if {! $::l1pro_square_limits} {
    append cmd ", square=0"
  }
  if {$::l1pro_cbar} {
    append cmd ", showcbar=1"
  }
  if {$opts(-fma)} {
    append cmd ", dofma=1"
  }
  append cmd ", cmin=$::plot_settings(cmin)"
  append cmd ", cmax=$::plot_settings(cmax)"
  if {$opts(-title) ne ""} {
    append cmd ", title=\"$opts(-title)\""
  }

  exp_send "$cmd;\r"
}

if {![winfo exists .l1wid]} {
  ::l1pro::main::gui
}

package require plot
source [file join $src_path data_segments.ytk]
