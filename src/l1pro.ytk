
#
# $Id$
#
# Orginal Amar Nayegandhi aka "anayegan"
#
# For info on using the Bwidget NoteBoook see:  http://mini.net/tcl/2298
#

#unset cdelta
#unset cmin
#unset cmax

  set ofname ""
  set win_no 		5
  set msize 		1.0
  set markerv		1
  set usecentroid   	1
  set hist_log		1
  set cmax 		40
  set cdelta		80
  set cmin		-40

  set cmax_max		5000
  set cmin_min		-100
  set cmax_inc		0.1
  
  set list		{}
  set lrnindx		{}
  set write_some 	0
  
  set varlist {fs_all depth_all veg_all cveg_all}

exp_send "#include \"geo_bath.i\"\r"; # load geobath.i code
exp_send "#include \"read_yfile.i\"\r"; # load read_yfile
exp_send "#include \"veg.i\"\r"; # load veg.i
exp_send "#include \"batch_process.i\"\r"; # load batch_process.i
expect ">";

package require BWidget
destroy .l1wid

toplevel .l1wid
wm title .l1wid "Process EAARL Data"
frame .l1wid.bf1
frame .l1wid.bf2
frame .l1wid.bf2.utm
frame .l1wid.bf3
frame .l1wid.bf4 
frame .l1wid.bf4.1
frame .l1wid.bf4.2
frame .l1wid.bf45 -relief groove -borderwidth 3
frame .l1wid.bf45.sc -relief groove -borderwidth 3
frame .l1wid.bf45.p -relief groove -borderwidth 3
frame .l1wid.bf45.q -relief groove -borderwidth 3
frame .l1wid.bf5 

.l1wid configure -menu .l1wid.mb
menu .l1wid.mb
menu .l1wid.mb.file
menu .l1wid.mb.load
menu .l1wid.mb.options
.l1wid.mb   add cascade -label File -underline 0 -menu .l1wid.mb.file

.l1wid.mb.file add command -label "Read Data File... " -underline 10 -command {
        global data_file_path 
        if { [info exists data_file_path ] == 0 } {
              set data_file_path ""
        }
  	exp_send "data_ptr = read_yfile(initialdir=\"$data_file_path\"); \r"
	expect ">"
	exp_send "read_pointer_yfile, data_ptr, mode=1; \r"
	expect ">"
	set ptype [.l1wid.bf4.1.p getvalue]
	
#	if {$ptype == 0} {
#	  exp_send "fs_all = *data_ptr(1);\r"
#	  expect ">"
#	}
#	if {$ptype == 1} {
#	  exp_send "depth_all = *data_ptr(1);\r"
#	  expect ">"
#	}
#	if {$ptype == 2} {
#	  exp_send "veg_all = *data_ptr(1);\r"
#	  expect ">"
#	}

  }
	
.l1wid.mb.file add command -label "Read Data Directory... " -underline 10 -command {
	destroy .l1dir
        toplevel .l1dir
	frame .l1dir.1
	LabelEntry .l1dir.op  -width 70 -relief sunken -bd 3 -label "Path:  " -helptext "Enter Data Path Here" \
		-textvariable path -text $data_file_path
 	Button .l1dir.1.ok -text "OK" -width 5 -command {
	 if {$path != ""} {
	  .l1dir.op configure -state disabled
	  .l1dir.1.ok configure -state disabled
  	  exp_send "data_ptr = read_yfile(\"$path\"); \r"
	  expect ">"
          exp_send "read_pointer_yfile, data_ptr, mode=1; \r"
	  expect ">"
	  set ptype [.l1wid.bf4.1.p getvalue]
	  destroy .l1dir
	 }
	}
	   
 	Button .l1dir.1.cancel -text "Cancel" -width 5 -command {
	   destroy .l1dir
 	}
	pack .l1dir.1.ok .l1dir.1.cancel -side left -padx 5
	pack .l1dir.op .l1dir.1 -side top -pady 5	
}

.l1wid.mb       add cascade -label "Load" -underline 0 -menu .l1wid.mb.load
.l1wid.mb.file  add command -label "Dismiss" -underline 0 -command {destroy .l1wid}
.l1wid.mb.load  add command -label "Load TANS Data .. " -underline 5 \
		-command { exp_send "tans = rbtans();\r" 
			   expect ">"
			 }

.l1wid.mb.load add command -label "Load PNAV Data .. " -underline 5 \
	-command { exp_send "pnav = rbpnav(); \r"
			 }

.l1wid.mb.load add command -label "Initialize structure BATHCTL .." -underline 21 \
	-command { 
   	  # show constants in GUI
	  destroy .bathctl
	  toplevel .bathctl
	  ComboBox .bathctl.type -text "Select Type" -width 12 -values "Florida_Keys Tampa_Bay West_Virginia" \
		-helptext "Select type.." -editable 0 \
		-modifycmd {
              set typeval [.bathctl.type getvalue]
	      if {$typeval == 0} {set type "keys"}
	      if {$typeval == 1} {set type "tampabay"}
	      if {$typeval == 2} {set type  "wva"}
              exp_send "type = define_bath_ctl(type=\"$type\"); \r"
		}
		
	  LabelEntry .bathctl.laser  -width 5 -relief sunken -bd 3 -label "Laser " \
		-helptext "Laser Decay Constant" \
		-textvariable laser \
		-command {
		    .bathctl.type configure -state disabled
		 }
	  
	  LabelEntry .bathctl.water  -width 5 -relief sunken -bd 3 -label "Water " \
		-helptext "Water Column Constant" \
		-textvariable water \
		-command {
		    .bathctl.type configure -state disabled
		 }

	  LabelEntry .bathctl.agc  -width 5 -relief sunken -bd 3 -label "AGC " \
		-helptext "Attenuation Gain Constant" \
		-textvariable agc \
		-command {
		    .bathctl.type configure -state disabled
		 }

	  LabelEntry .bathctl.thresh  -width 5 -relief sunken -bd 3 -label "Threshold " \
		-helptext "Threshold" \
		-textvariable thresh \
		-command {
		    .bathctl.type configure -state disabled
		 }

	  LabelEntry .bathctl.last  -width 5 -relief sunken -bd 3 -label "Last " \
		-helptext "Last (nanosecond)" \
		-textvariable last \
		-command {
		    .bathctl.type configure -state disabled
		 }
 		   
          
	  Button .bathctl.ok -text "OK" -width 5 -command {
	    if {[.bathctl.type cget -state] == "disabled"} {
 		exp_send "bath_ctl.laser = $laser; bath_ctl.water=$water; bath_ctl.agc=$agc; bath_ctl.thresh = $thresh; bath_ctl.last = $last; \r"
	    } else {
 		exp_send "bath_ctl.laser = $laser; bath_ctl.water=$water; bath_ctl.agc=$agc; bath_ctl.thresh = $thresh; bath_ctl.last = $last; \r"
	    }
	    .bathctl.type configure -state normal
 	    
	  }
	 
	  Button .bathctl.cancel -text "Cancel" -width 5 -command {
	    .bathctl.type configure -state normal
	    destroy .bathctl
	  }


	  pack .bathctl.type -side top 
	  pack .bathctl.laser .bathctl.water .bathctl.agc  .bathctl.thresh .bathctl.last  -side top
	  pack .bathctl.ok .bathctl.cancel -side left

}


.l1wid.mb add cascade -label Options -underline 0 -menu .l1wid.mb.options
.l1wid.mb.options add command -label "Configure elevation scale limits..." -underline 0 \
	-command { 
	   destroy  .l1wid-opts
 	   toplevel .l1wid-opts
	   frame .l1wid-opts.f1
	   frame .l1wid-opts.f2
	   frame .l1wid-opts.f3
	   Label .l1wid-opts.f1.label -text "Maximum:" 
	   Label .l1wid-opts.f2.label -text "Minimum:" 
	   Label .l1wid-opts.f3.label -text "Increment:" 
	   SpinBox  .l1wid-opts.f1.max -range { -100. 5000. 10. }  \
		-textvariable cmax_max \
		-modifycmd {  .l1wid.bf45.sc.1.cmax.sc configure -to $cmax_max }
	   SpinBox  .l1wid-opts.f2.min -range { -100. 5000. 10. }  \
                -textvariable cmax_min \
                -modifycmd {  .l1wid.bf45.sc.1.cmax.sc configure -from $cmax_min }
	   SpinBox  .l1wid-opts.f3.inc \
		-values { 0.1 0.2 .25 .5 .75 1.0 1.5 2.0 2.5 3 4 5 6 7 8 9 10 15 20 25 }  \
                -textvariable cmax_inc \
                -modifycmd {  .l1wid.bf45.sc.1.cmax.sc configure -resolution $cmax_inc }

	   pack .l1wid-opts.f1.label .l1wid-opts.f1.max -side left -fill x
	   pack .l1wid-opts.f2.label .l1wid-opts.f2.min -side left -fill x
	   pack .l1wid-opts.f3.label .l1wid-opts.f3.inc -side left -fill x
	   pack .l1wid-opts.f1 .l1wid-opts.f2 .l1wid-opts.f3 -side top -anchor e
         }
.l1wid.mb.options add checkbutton -label "Log Historgrams" -underline 0 \
	-variable hist_log \
	-command hist_linlog 

.l1wid.mb.options add command -label "Plot/Write Indvidual Flightlines..." -underline 0 \
 -command {
    global list lrnindx
    destroy .l1plot
    toplevel .l1plot 
    wm title .l1plot "Plot / Write Selected Flightlines"
    frame .l1plot.1
    listbox .l1plot.1.lb -selectmode extended -width 50 -xscrollcommand ".l1plot.xscroll set" -yscrollcommand ".l1plot.1.yscroll set" 
    scrollbar .l1plot.xscroll -orient horizontal -command [list .l1plot.1.lb xview]
    scrollbar .l1plot.1.yscroll -command [list .l1plot.1.lb yview]
    for {set i 0} { $i < [llength $lrnindx] } {incr i} { 
       set e [lindex $lrnindx $i]
       set rnf [lindex $list [expr ($i*2)]]
       set rnl [lindex $list [expr ($i*2+1)]]
       .l1plot.1.lb insert end "Flightline $i. Rasters $rnf to $rnl. Start Index = $e" 
    }
    
    Button .l1plot.sall -text "Select All" -width 10 -command {
        .l1plot.1.lb selection set 0 [llength $lrnindx]
    }

    Button .l1plot.clear -text "Clear All" -width 10 -command {
        .l1plot.1.lb delete 0 end
       set list {}
       set lrnindx {}
    }

    Button .l1plot.plot -text "Plot" -width 6 -command {
	make_selected_arrays {junk}
	plot_fltlines 1
	
    }
    Button .l1plot.write -text "Write Datafile" -command {
	 set write_some 1
	 make_selected_arrays {junk}
        .l1wid.bf5.1 invoke	
    }

    pack .l1plot.1.lb .l1plot.1.yscroll -side left -fill y 
    pack .l1plot.1 .l1plot.xscroll -side top -fill x
    pack .l1plot.sall .l1plot.clear .l1plot.plot .l1plot.write -side left -fill x
}

.l1wid.mb.options add command -label "Show Flightlines with No Raster Data..." -underline 25 \
 -command {
   exp_send "plot_no_raster_fltlines(gga, edb);\r"
 }

.l1wid.mb.options add command -label "Show Flightlines with No TANS Data..." -underline 25 \
 -command {
   exp_send "plot_no_tans_fltlines(tans, gga);\r"
 }

.l1wid.mb.options add command -label "List Plot Variables..." -underline 10 -command {
   
    global varlist
    destroy .varplot
    toplevel .varplot 
    wm title .varplot "List"
    frame .varplot.1
    frame .varplot.2
    listbox .varplot.1.lb -selectmode single -width 12 -xscrollcommand ".varplot.xscroll set" -yscrollcommand ".varplot.1.yscroll set" 
    scrollbar .varplot.xscroll -orient horizontal -command [list .varplot.1.lb xview]
    scrollbar .varplot.1.yscroll -command [list .varplot.1.lb yview]
    for {set i 0} { $i < [llength $varlist] } {incr i} { 
       .varplot.1.lb insert end [lindex $varlist $i]
    }
    Button .varplot.2.select -text "Select" -command {
      set plot_var [lindex $varlist [.varplot.1.lb curselection]]
      .l1wid.bf45.p.15 setvalue @[.varplot.1.lb curselection]
    }
    LabelEntry .varplot.2.add -width 8 -relief sunken -label "Add:" -helptext "Add variable name to list" \
      -textvariable addvar 
    .varplot.2.add bind <Return> { 
        global varlist
	lappend varlist $addvar
        .l1wid.bf45.p.15 configure -values $varlist
        .varplot.1.lb insert end $addvar
    }
    Button .varplot.2.delete -width 8 -text "Delete" \
       -command {
         set del_no [.varplot.1.lb curselection]
         if {$del_no <= 3} {
          # don't delete fixed variables
       	  tk_messageBox  -icon warning \
            -message "Cannot delete this variable" \
             -type ok
         } else {
          set del_var [lindex $varlist $del_no]
          set new_varlist1 [lrange $varlist 0 [expr ($del_no-1)]]
          set new_varlist2 [lrange $varlist [expr ($del_no+1)] end]
	  .varplot.1.lb delete $del_no $del_no	
          set varlist [concat $new_varlist1 $new_varlist2]
          .l1wid.bf45.p.15 configure -values $varlist
         }
    }
    Button .varplot.2.dismiss -text "Dismiss" -width 8 -command {
          destroy .varplot
    }
    pack .varplot.1.lb .varplot.1.yscroll -side left -fill y 
    pack .varplot.2.select .varplot.2.add .varplot.2.delete .varplot.2.dismiss -side top -fill x
    pack .varplot.1 .varplot.xscroll .varplot.2 -side top -fill x
  }

proc make_selected_arrays {junk} {
    global lrnindx list
    	set curlist [.l1plot.1.lb curselection]
        set ptype [.l1wid.bf4.1.p getvalue]
 	if {$ptype == 0} {
    	  exp_send "fs_some = \[\];\r"
	  expect ">"
	  foreach f $curlist {
           set fidx [lindex $lrnindx $f] 
	   set lidx [lindex $lrnindx [expr ($f+1)]]
	   if {[expr ($lidx-$fidx)] != 0} {
	    if {($lidx != "")} { 
	      set lidx [expr ($lidx - 1)]
 	      exp_send "grow, fs_some, fs_all($fidx:$lidx);\r"
	      expect ">"
	    } else {
	      exp_send "grow, fs_some, fs_all($fidx:);\r"
	      expect ">"
 	    }
	   }
    	  }
        }
 	if {$ptype == 1} {
    	  exp_send "depth_some = \[\];\r"
	  expect ">"
	  foreach f $curlist {
           set fidx [lindex $lrnindx $f] 
	   set lidx [lindex $lrnindx [expr ($f+1)]]
	   if {[expr ($lidx-$fidx)] != 0} {
	    if {$lidx != ""} {
	      set lidx [expr ($lidx - 1)]
 	      exp_send "grow, depth_some, depth_all($fidx:$lidx);\r"
	      expect ">"
	    } else {
	      exp_send "grow, depth_some, depth_all($fidx:);\r"
	      expect ">"
 	    }
	   }
    	  }
        }
 	if {$ptype == 2} {
    	  exp_send "veg_some = \[\];\r"
	  expect ">"
	  foreach f $curlist {
           set fidx [lindex $lrnindx $f] 
	   set lidx [lindex $lrnindx [expr ($f+1)]]
	   if {[expr ($lidx-$fidx)] != 0} {
	    if {$lidx != ""} {
	      set lidx [expr ($lidx - 1)]
 	      exp_send "grow, veg_some, veg_all($fidx:$lidx);\r"
	      expect ">"
	    } else {
	      exp_send "grow, veg_some, veg_all($fidx:);\r"
	      expect ">"
 	    }
	   }
    	  }
        }
 	if {$ptype == 3} {
    	  exp_send "cveg_some = \[\];\r"
	  expect ">"
	  foreach f $curlist {
           set fidx [lindex $lrnindx $f] 
	   set lidx [lindex $lrnindx [expr ($f+1)]]
	   if {[expr ($lidx-$fidx)] != 0} {
	    if {$lidx != ""} {
	      set lidx [expr ($lidx - 1)]
 	      exp_send "grow, cveg_some, cveg_all($fidx:$lidx);\r"
	      expect ">"
	    } else {
	      exp_send "grow, cveg_some, cveg_all($fidx:);\r"
	      expect ">"
 	    }
	   }
    	  }
        }
}
    
proc hist_linlog {} {
 global hist_log
       exp_send "_win=window();window,0;\
  logxy,0,$hist_log; range,$hist_log;window,_win \r"
}


ComboBox .l1wid.bf4.1.d -text "Define Region using..." -width 22 -values "Rubberband-Box Points-in-Polygon Line-Segment Enter_Rectangular_Coordinates" -helptext "Select region to process using any of the following methods" -editable 0 -modifycmd {
    set defr [.l1wid.bf4.1.d getvalue]
    puts $defr
    if {$defr == 0} {
       	tk_messageBox  -icon info \
        -message "Drag a Rectangular Box in Window 6 to define region." \
        -type ok -title "Message"
       exp_send "q = gga_win_sel(2);\r"
       expect ">"
    }
    if {$defr == 1} {
       	tk_messageBox  -icon info \
        -message "Draw a Polygon in Window 6 to define a region using a series of left mouse clicks.  To complete the polygon, hit <Ctrl> and left mouse click." \
        -type ok -title "Message"
       exp_send "q = gga_pip_sel(1);\r"
       expect ">"
    }
    if {$defr == 2} {
       exp_send "q = gga_click_sel(1);\r"
       expect ">"
    }
    if {$defr == 3} {
        destroy .l1widc
        toplevel .l1widc
	frame .l1widc.lon
	frame .l1widc.1
	frame .l1widc.utm
	ComboBox .l1widc.utm.1 -text "Coordinate System" -width 18 -values "LatLon UTM" \
		-helptext "Select the Coordinate System." -editable 0 
	LabelEntry .l1widc.utm.2 -width 6 -relief sunken  -label "UTM Zone: " -helptext "Enter UTM Zone Here" \
		-textvariable zone 

	LabelEntry .l1widc.lat1 -width 12 -relief sunken -label "NorthLat/Max.Northing " \
		-helptext "Enter Maximum Latitude in degrees or Maximum UTM Northing in meters Here"\
		-textvariable mxlat
	LabelEntry .l1widc.lat2 -width 12 -relief sunken -label "SouthLat/Min.Northing  " \
		-helptext "Enter Minimum Latitude in degrees or Minimum UTM Northing in meters Here"\
		-textvariable mnlat

	LabelEntry .l1widc.lon.mn -width 12 -relief sunken -label "WestLon/Min.Easting  " \
		-helptext "Enter Westernmost Longitude in degrees or Minimum UTM Easting in meters Here"\
		-textvariable mnlon
	LabelEntry .l1widc.lon.mx -width 12 -relief sunken -label "EastLon/Max.Easting " \
		-helptext "Enter Easternmost Longitude in degrees or Maximum UTM Easting in meters Here"\
		-textvariable mxlon
	Button .l1widc.1.ok -text "OK" -width 5 -command {
          set utm [.l1widc.utm.1 getvalue]
	  destroy .l1widc
	}
	Button .l1widc.1.box -text "Plot Region" -width 7 -command {
	   exp_send "a_x=\[$mnlon, $mxlon, $mxlon, $mnlon, $mnlon\];\r"
	   exp_send "a_y=\[$mnlat, $mnlat, $mxlat, $mxlat, $mnlat\];\r"
	   exp_send "plg, a_y, a_x;\r";
	}

	  
	Button .l1widc.1.cancel -text "Cancel" -width 5 -command {
	  destroy .l1widc
	}
	pack .l1widc.utm.1 .l1widc.utm.2 -side left 
	pack .l1widc.lon.mn .l1widc.lon.mx -side left -padx 4
	pack .l1widc.utm .l1widc.lat1 .l1widc.lon .l1widc.lat2 -side top -pady 5
	pack .l1widc.1.ok .l1widc.1.box .l1widc.1.cancel -side left
	pack .l1widc.1 -side top


   }
   if {$defr == -1} {
	error "Please Define Region."
   }
} 

ComboBox .l1wid.bf4.1.p -text "Process For..." -width 22 \
	-helptext "Process Data for any of the following" \
	-editable 0 \
	-values { SubAerial-Topography Bathymetry Vegetation Multi-peak-Vegetation}

.l1wid.bf4.1.p setvalue first

checkbutton .l1wid.bf4.2.cll -text "Convert UTM\nto Lat Lon" -variable cll 
# checkbutton .l1wid.bf4.2.cng -text "Convert to\nNAVD 88 (GEOID)" -variable cng 
checkbutton .l1wid.bf4.2.cen -text "Correct Range \nWalk with Centroid" -variable usecentroid 


checkbutton .l1wid.bf45.p.fma -text "Auto\nFma" -variable l1pro_fma 

Button .l1wid.bf45.p.1 -text "Plot" -command {
 plot_fltlines 0
}

ComboBox .l1wid.bf45.p.15 -text "Variable" -width 10 -values \
  	$varlist \
	-helptext "Select any one of the following variables to plot" \
	-editable 1

Label .l1wid.bf45.p.2 -text "in Win:"
SpinBox .l1wid.bf45.p.3 -justify center -range {0 7 1} \
	-width 2 -textvariable win_no 

ComboBox .l1wid.bf45.p.5 -text "Display Type" -width 20 -values \
	"First_Return_Topography Sub-aqueous_Topography \
	Water_Depth Bare_Earth_Topography Surface_Amplitude Bottom_Amplitude Canopy_Height" \
	-helptext "Select any one of the following" \
	-editable 0

.l1wid.bf45.p.5 setvalue first

Button .l1wid.bf45.q.2 -text "Histogram\nElevations" \
  -helptext "Generate and display a histogram of all the first return elevations" \
  -command {
      set ptype [.l1wid.bf4.1.p getvalue]
      set disp_type [.l1wid.bf45.p.5 getvalue]
      if {$disp_type == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of data before using this function!" \
        -type ok
     }
     if {$ptype == 0} {
      exp_send "hst = hist_fs(fs_all); \r"
     }
     if {$ptype == 1} {
      if {$disp_type == 0} {
   	exp_send "hst = hist_fs(depth_all);\r"
      } else {
        exp_send "hst = hist_depth(depth_all); \r"
      }
     }
     if {$ptype == 2} {
      if {$disp_type == 0} {
   	exp_send "hst = hist_fs(veg_all);\r"
      } else {
        exp_send "hst = hist_veg(cveg_all); \r"
      }
     }
  }

Button .l1wid.bf45.q.1 -text "Pixel\nWaveform" \
  -helptext "Click to jump to raster, pulse, and image for xyz point" \
  -command {
     set ptype [.l1wid.bf4.1.p getvalue]
     set disp_type [.l1wid.bf45.p.5 getvalue]
     if {$disp_type == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of data before using this function!" \
        -type ok
     }
     if {$ptype == 0} {
        exp_send "mindata = raspulsearch(fs_all, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type, ptype=$ptype, lmark = lmark);\r"
     }
     if {$ptype == 1} {
        exp_send "mindata = raspulsearch(depth_all, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type, ptype=$ptype, lmark = lmark );\r"
     }
     if {$ptype == 2} {
        exp_send "mindata = raspulsearch(veg_all, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type, ptype=$ptype, lmark = lmark);\r"
     }
     if {$ptype == 3} {
        exp_send "mindata = raspulsearch(cveg_all, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type, ptype=$ptype, lmark = lmark);\r"
     }
   }
	   
Button .l1wid.bf45.q.3 -text "Color\nBar" \
	-command { 
        exp_send "colorbar, $cmin, $cmax, drag=1\r";
}
Button .l1wid.bf45.q.4 -text "Elevation\nClipper" \
		-command {
	destroy .l1clip
        toplevel .l1clip
        wm title .l1clip "Elevation Clipper"
	frame .l1clip.1
        set ptype [.l1wid.bf4.1.p getvalue]
	#SpinBox  .l1clip.max -range { -100. 5000. 10. }  \
	#	-textvariable max_elv -text "Maximum Elevation"
	#SpinBox  .l1clip.min -range { -100. 5000. 10. }  \
        #        -textvariable min_elv -text "Minimum Elevation"
	#SpinBox  .l1clip.range \
	#	-range { 1 100 } \
         #       -textvariable range_elv  -text "Vertical Range"
        checkbutton .l1clip.proc -text "Use this clipper to process new data" -variable proc_clip 
        checkbutton .l1clip.ymin -variable ymin \
		-command {
		    if {$ymin == 1} {
			set yrange 0
			.l1clip.min.sb configure -state normal
			.l1clip.min.lb configure -state normal
			.l1clip.min.sc configure -state normal
			.l1clip.range.sb configure -state disabled
			.l1clip.range.lb configure -state disabled
			.l1clip.range.sc configure -state disabled
		    }
		    if {$ymin == 0} {
			.l1clip.min.sb configure -state disabled
			.l1clip.min.lb configure -state disabled
			.l1clip.min.sc configure -state disabled
		    }
			
		}
        checkbutton .l1clip.ymax -variable ymax \
		-command {
		    if {$ymax == 1} {
			set yrange 0
			.l1clip.max.sb configure -state normal
			.l1clip.max.lb configure -state normal
			.l1clip.max.sc configure -state normal
			.l1clip.range.sb configure -state disabled
			.l1clip.range.lb configure -state disabled
			.l1clip.range.sc configure -state disabled
		    }
		    if {$ymax == 0} {
			.l1clip.max.sb configure -state disabled
			.l1clip.max.lb configure -state disabled
			.l1clip.max.sc configure -state disabled
		    }
 		}
        checkbutton .l1clip.yrange -variable yrange \
		 -command {
		    if {$yrange == 1} {
			set ymin 0
			set ymax 0
			.l1clip.range.sb configure -state normal
			.l1clip.range.lb configure -state normal
			.l1clip.range.sc configure -state normal
			.l1clip.min.sb configure -state disabled
			.l1clip.min.lb configure -state disabled
			.l1clip.min.sc configure -state disabled
			.l1clip.max.sb configure -state disabled
			.l1clip.max.lb configure -state disabled
			.l1clip.max.sc configure -state disabled
		    }
		    if {$yrange == 0} {
			.l1clip.range.sb configure -state disabled
			.l1clip.range.lb configure -state disabled
			.l1clip.range.sc configure -state disabled
		    }
		 }
        sst .l1clip.max   max_elv   "  Maximum Elevation:"  { -100 1000.0 0.1  }
        sst .l1clip.min   min_elv   "  Minimum Elevation:"  { -100 1000.0 0.1  }
        sst .l1clip.range   range_elv   "  Vertical Range:"  { 0 100.0 0.1  }

	Button .l1clip.1.ok -text "OK" -width 5 -command {
	    
          set ptype [.l1wid.bf4.1.p getvalue]
          set disp_type [.l1wid.bf45.p.5 getvalue]
	  if {$ptype == 0} {
		//for surface topography
	  }
	  if {$ptype == 1} {
		//for bathymetry
	  }
	  if {$ptype == 2} {
		//for vegetation
	  }
	    destroy .l1clip
          }
 
 	Button .l1clip.1.cancel -text "Cancel" -width 5 -command {
	   destroy .l1clip
 	}

 	Button .l1clip.1.dismiss -text "Dismiss" -width 5 -command {
	   destroy .l1clip
 	}

	pack .l1clip.1.ok .l1clip.1.cancel .l1clip.1.dismiss -side left -padx 5
	pack .l1clip.proc .l1clip.ymin .l1clip.min .l1clip.ymax .l1clip.max .l1clip.yrange .l1clip.range .l1clip.1 -side top -pady 5	
  }




frame  .l1wid.bf45.sc.1

## This procedure builds a widget composed of a
## Label, a Spinbox, and a scale so one can enter 
## values by direct entry, the spin clicks, or 
## the scale.
proc sst  { w var lbl rg } {
  frame $w
  SpinBox $w.sb -textvariable $var \
	-range $rg \
	-width 6
  scale $w.sc -showvalue 0 -orient horizontal  \
	-variable $var \
	-from [ lindex $rg 0 ] \
	-to   [ lindex $rg 1 ] \
	-resolution [ lindex $rg 2 ]
  label $w.lb -text $lbl
  pack $w.lb $w.sb $w.sc -side left -fill x -expand 1
  return $w
}

proc ud { a b c } {
global cmax cmin cdelta
  switch $a {
   cmax   { set cdelta [ expr $cmax - $cmin ]; }
   cmin   { set cmax   [ expr $cmin + $cdelta ]; } 
   cdelta { set cmax   [ expr $cmin + $cdelta ]; }
  }
}

trace vdelete cdelta w ud 
trace vdelete cmin w ud 
trace vdelete cmax w ud 

trace variable cdelta w ud
trace variable cmin   w ud
trace variable cmax   w ud

 sst .l1wid.bf45.sc.1.cmax   cmax   "  Cmax:"	  { -50 5000.0 0.1  }
 sst .l1wid.bf45.sc.1.cmin   cmin   "  Cmin:"	  { -50 5000.0 0.1  }
 sst .l1wid.bf45.sc.1.cdelta cdelta "Cdelta:"  { 0.0  300.0 0.1 }
 pack .l1wid.bf45.sc.1.cmax .l1wid.bf45.sc.1.cdelta .l1wid.bf45.sc.1.cmin -side top


frame  .l1wid.bf45.sc.f
  SpinBox .l1wid.bf45.sc.f.msize \
        -range {0.1 10.0 0.1}  \
        -textvariable msize \
	-helptext "Enter Marker Size (msize)"

  SpinBox .l1wid.bf45.sc.f.marker \
        -range {0 9 1}  \
        -textvariable markerv \
	-helptext "Enter Marker Type (See help, marker for more details)"

 pack  .l1wid.bf45.sc.f.msize .l1wid.bf45.sc.f.marker -side top




Button .l1wid.bf5.1 -text "Write Datafile" -width 20 \
		-command {
	global write_some
	destroy .l1wid1
        toplevel .l1wid1
	frame .l1wid1.1
        set ptype [.l1wid.bf4.1.p getvalue]
	LabelEntry .l1wid1.op  -width 70 -relief sunken -bd 3 -label "Opath:  " -helptext "Enter Output File Path Here" \
		-textvariable opath

	LabelEntry .l1wid1.of  -width 70 -relief sunken -bd 3 -label "Ofname: " \
		-helptext "Enter Output File Name Here" \
		-textvariable ofname

	Button .l1wid1.1.ok -text "OK" -width 5 -command {
    	  if { ![ string equal  "" $ofname ] } {
	    
	    .l1wid1.op configure -state disabled
	    .l1wid1.of configure -state disabled
	    .l1wid1.1.ok configure -state disabled

 	    if {$ptype == 0} {
	     if {$write_some == 0} {
 	       exp_send "write_topo, \"$opath\", \"$ofname\", fs_all; \r";
	       expect ">"
	     } else {
 	       exp_send "write_topo, \"$opath\", \"$ofname\", fs_some; \r";
	       expect ">"
	     }  
	    }
 	    if {$ptype == 1} {
	     if {$write_some == 0} {
      	       exp_send "write_bathy, \"$opath\", \"$ofname\", depth_all; \r";
	       expect ">"
	     } else {
      	       exp_send "write_bathy, \"$opath\", \"$ofname\", depth_some; \r";
	       expect ">"
   	     }	
	    }
 	    if {$ptype == 2} {
	     if {$write_some == 0} {
      	       exp_send "write_veg, \"$opath\", \"$ofname\", veg_all; \r";
	       expect ">"
	     } else {
      	       exp_send "write_veg, \"$opath\", \"$ofname\", veg_some; \r";
	       expect ">"
   	     }	
	    }
 	    if {$ptype == 3} {
	     if {$write_some == 0} {
      	       exp_send "write_multipeak_veg, cveg_all, opath=\"$opath\", ofname=\"$ofname\"; \r";
	       expect ">"
	     } else {
      	       exp_send "write_multipeak_veg, cveg_some, opath=\"$opath\", ofname=\"$ofname\"; \r";
	       expect ">"
   	     }	
	    }
	    destroy .l1wid1
    	  } else { 
       	    tk_messageBox  -icon warning \
            -message "You need to specify an output file name" \
            -type ok
          }
	  set write_some 0
        }
 
 	Button .l1wid1.1.cancel -text "Cancel" -width 5 -command {
	   set write_some 0
	   destroy .l1wid1
 	}
	pack .l1wid1.1.ok .l1wid1.1.cancel -side left -padx 5
	pack .l1wid1.op .l1wid1.of .l1wid1.1 -side top -pady 5	
  }

 Button .l1wid.bf5.2 -text "Process Now" -width 20 \
		-command \
     {
  	   global list lrnindx
           set list {}
           set lrnindx {}
	   exp_send "utm = $utm\n"
	   set ptype [.l1wid.bf4.1.p getvalue]
           set defr [.l1wid.bf4.1.d getvalue]
	   exp_send "ptype = $ptype\n\r"
	   if {$defr == 3} {
	     exp_send "q = gga_win_sel(2, win=6, llarr=\[$mnlon, $mxlon, $mnlat, $mxlat\]);\r"
	   }
          #exp_send "make_bathy, opath=\"$opath\", ofname=\"$ofname\",\
          #    ext_bad_att=$xba, ext_bad_depth=$xbd, latutm = 1, llarr=\[$mnlon,\
          #    $mxlon, $mnlat, $mxlat\];\r"
	 if {$ptype == 0} {
	    exp_send "fs_all = make_fs(latutm=1, q=q, ext_bad_att=1, usecentroid=$usecentroid);\r"
	    expect ">"
	 }
	 if {$ptype == 1} {
           exp_send "depth_all = make_bathy(latutm = 1, q = q, ext_bad_depth=1, ext_bad_att=1);\r"
	   expect ">"
	 }
	 if {$ptype == 2} {
	    exp_send "veg_all = make_veg(latutm=1, q=q, ext_bad_att=1, ext_bad_veg=1, use_centroid=$usecentroid);\r"
	    expect ">"
	 }
	 if {$ptype == 3} {
	    exp_send "cveg_all = make_veg(latutm=1, q=q, use_peak=$usecentroid, multi_peaks=1);\r"
	    expect ">"
 	 }
              
    }


#pack  .l1wid.bf2.utm.1 .l1wid.bf2.utm.2 -side left 
#pack .l1wid.bf2.op  .l1wid.bf2.of .l1wid.bf2.utm -side top -pady 8
#pack .l1wid.bf2.utm -side top -pady 8
#pack .l1wid.bf3.lon.but.1 .l1wid.bf3.lon.but.2 -side top -padx 4
#pack .l1wid.bf3.lon.mn .l1wid.bf3.lon.mx -side left -padx 4
#pack .l1wid.bf3.lat1 .l1wid.bf3.lon .l1wid.bf3.lat2 -side top -pady 5
#pack  .l1wid.bf4.1.cb .l1wid.bf4.1.xba .l1wid.bf4.1.xbd .l1wid.bf4.1.xbv -side top -padx 20 -pady 5
#pack  .l1wid.bf4.1 -side top -padx 20 -pady 5
pack .l1wid.bf4.1.d .l1wid.bf4.1.p -side left -padx 5
pack  .l1wid.bf4.2.cll .l1wid.bf4.2.cen -side left -padx 3
pack .l1wid.bf4.1 .l1wid.bf4.2 -side top -pady 3
pack .l1wid.bf5.1 .l1wid.bf5.2 -side right
pack .l1wid.bf1 .l1wid.bf2 .l1wid.bf3 .l1wid.bf4 -side top -expand 1 -fill both
pack .l1wid.bf45.sc.1  -side left  -padx 3
pack .l1wid.bf45.sc.f  -side left
pack .l1wid.bf45.q.1 .l1wid.bf45.q.2  .l1wid.bf45.q.3 .l1wid.bf45.q.4 -side left
pack 	.l1wid.bf45.p.fma \
	.l1wid.bf45.p.1 \
	.l1wid.bf45.p.15 \
	.l1wid.bf45.p.5 \
	.l1wid.bf45.p.2 \
	.l1wid.bf45.p.3 \
	-side left -fill x  -padx 2
pack .l1wid.bf45.p .l1wid.bf45.sc .l1wid.bf45.q \
	-side top -fill x -expand 1
pack .l1wid.bf5 .l1wid.bf45  -side top -pady 3 

proc send_latlon_to_l1pro {minlon maxlon minlat maxlat utm} {
   global mnlon mxlon mnlat mxlat utm
   # .l1widc.utm.1 setvalue @$utm
   set mnlon $minlon
   set mxlon $maxlon
   set mnlat $minlat
   set mxlat $maxlat
}

proc send_bathctl_to_l1pro {blaser bwater bagc bthresh blast} {
   global laser water agc thresh last
   set laser $blaser
   set water $bwater
   set agc   $bagc
   set thresh $bthresh
   set last $blast
}

proc send_rnarr_to_l1pro {bstart bstop brnindx} {
   global start stop list lrnindx
   set start $bstart
   set stop $bstop
   set rnindx $brnindx
   set list1 [concat $start $stop]
   if {[llength $list] == 0} {
    set list $list1 
    set lrnindx $rnindx
   } else {
    set list [concat $list $list1 ]
    set lrnindx [concat $lrnindx $rnindx]
   }
}


proc plot_fltlines {sel} {
  
 global l1pro_fma win_no cmin cmax cdelta msize markerv varlist
     #fill in later using what to plot
     set fs 0
     set ba 0
     set de 0
     set lelv 0
     set fint 0
     set lint 0
     set cht 0
     set disp_type [.l1wid.bf45.p.5 getvalue]
     set var_no [.l1wid.bf45.p.15 getvalue]
     set var_type [lindex $varlist $var_no]
     if {$disp_type == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of data to display!" \
        -type ok
     }
     if {$disp_type == 0} { set fs  1}
     if {$disp_type == 1} { set ba  1}
     if {$disp_type == 2} { set de  1}
     if {$disp_type == 3} { set lelv  1}
     if {$disp_type == 4} { set fint 1}
     if {$disp_type == 5} { set lint 1}
     if {$disp_type == 6} { set cht 1}
     set ptype [.l1wid.bf4.1.p getvalue]
     if {$ptype == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of processed data i.e. topo, bathy or veg!" \
        -type ok
     } else {
         if { $l1pro_fma } {
	   exp_send "window,$win_no; fma;\r";
	 }
     }

     set cmax [ expr $cmin + $cdelta ]
     if {$ptype == 0} {
       set cmax1 [expr $cmax*100.]
       set cmin1 [expr $cmin*100.]
       if {$sel == 0} {
	   exp_send "fs_some = $var_type;\n"
           expect ">"
       } 
       if {$disp_type == 0} {
         exp_send "display, fs_some, win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv, edt=1;\r"
         expect ">"
       } elseif { $disp_type == 4 } {
         exp_send "display, fs_some, mode=\"intensity\", win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv;\r"
         expect ">"
       }
     }
     if {$ptype == 1} {
       if {$sel == 0} {
          exp_send "depth_some = $var_type;\r"
 	  expect ">"
       }
       exp_send "plot_bathy, depth_some, win=$win_no, ba=$ba, fs = $fs, de = $de , fint = $fint, lint = $lint, cmin=$cmin, cmax=$cmax, msize = $msize; \r"
       expect ">"
     }
     if {$ptype == 2} {
        if {$sel == 0} {
	   exp_send "veg_some = $var_type;\r"
           expect ">"
        } 
         exp_send "display_veg, veg_some, win=$win_no, cmin=$cmin, cmax = $cmax, size = $msize, edt=1, felv = $fs, lelv=$lelv, fint=$fint, lint=$lint, cht = $cht, marker=$markerv;\r"
         expect ">"
     }
     if {$ptype == 3} {
       if {$sel == 0} {
	   exp_send "cveg_some = $var_type;\r"
           expect ">"
       } 
       if {$disp_type == 0} {
         exp_send "display, cveg_some, win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv, edt=1;\r"
         expect ">"
       } elseif { $disp_type == 4 } {
         exp_send "display, cveg_some, mode=\"intensity\", win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv;\r"
         expect ">"
       }
     }
}

