
#
# $Id$
#
# Orginal Amar Nayegandhi aka "anayegan"
#
# For info on using the Bwidget NoteBoook see:  http://mini.net/tcl/2298
#

#unset cdelta
#unset cmin
#unset cmax

  set ofname ""
  set win_no 		5
  set msize 		1.0
  set markerv		1
  set usecentroid   	1
  set hist_log		1
  set cmax 		40
  set cdelta		80
  set cmin		-40

  set cmax_max		5000
  set cmin_min		-100
  set cmax_inc		0.1
  
  set list		{}
  set lrnindx		{}
  set write_some 	0
  
  array set _mpipx {
	0,0	Selector
	0,1	Data_Variable
	0,2	PIP_Variable
	0,3	File_Name
	0,4	Processing_Type
	0,5	GGA_Array
  }
  global varc
  set varc 0
  if {[info exists varname]} {unset varlist}
  set varlist {fs_all depth_all veg_all cveg_all}
  if {[info exists plist]} { unset plist } 
  array set plist {idx1 idx1, cmin $cmin cmax $cmax ptype 0 dtype 0 msize $msize mtype $markerv}
  set plist(idx1,cmin) $cmin
  set plist(idx1,cmax) $cmax
  set plist(idx1,ptype) 0
  set plist(idx1,dtype) 0
  set plist(idx1,msize) $msize
  set plist(idx1,mtype) $markerv

  set plist(idx2,cmin) $cmin
  set plist(idx2,cmax) $cmax
  set plist(idx2,ptype) 1
  set plist(idx2,dtype) 1
  set plist(idx2,msize) $msize
  set plist(idx2,mtype) $markerv

  set plist(idx3,cmin) $cmin
  set plist(idx3,cmax) $cmax
  set plist(idx3,ptype) 2
  set plist(idx3,dtype) 3
  set plist(idx3,msize) $msize
  set plist(idx3,mtype) $markerv

  set plist(idx4,cmin) $cmin
  set plist(idx4,cmax) $cmax
  set plist(idx4,ptype) 3
  set plist(idx4,dtype) 0
  set plist(idx4,msize) $msize
  set plist(idx4,mtype) $markerv

  set plot_dpi 100
  array set cbvc {cmin cmin cmax cmax msize msize mtype mtype}

exp_send "#include \"geo_bath.i\"\r"; # load geobath.i code
exp_send "#include \"read_yfile.i\"\r"; # load read_yfile
exp_send "#include \"veg.i\"\r"; # load veg.i
exp_send "#include \"batch_process.i\"\r"; # load batch_process.i
exp_send "#include \"batch_multipip_process.i\"\r"; # load batch_multipip_process.i
exp_send "#include \"comparison_fns.i\"\r"; # load for rcf filter function
exp_send "#include \"bathy_filter.i\"\r"; # load for rcf filter function
exp_send "#include \"data_rgn_selector.i\"\r"; 
exp_send "#include \"wgs842nad83.i\"\r"; 
exp_send "#include \"nad832navd88.i\"\r"; 
exp_send "#include \"datum_converter.i\"\r"; 
expect ">";

package require BWidget
package require Tktable
destroy .l1wid

toplevel .l1wid
wm title .l1wid "Process EAARL Data"
frame .l1wid.bf1
frame .l1wid.bf2
frame .l1wid.bf2.utm
frame .l1wid.bf3
frame .l1wid.bf4 
frame .l1wid.bf4.1
frame .l1wid.bf4.2
frame .l1wid.bf45 -relief groove -borderwidth 3
frame .l1wid.bf45.sc -relief groove -borderwidth 3
frame .l1wid.bf45.p -relief groove -borderwidth 3
frame .l1wid.bf45.q -relief groove -borderwidth 3
frame .l1wid.bf5  -relief groove -borderwidth 3

.l1wid configure -menu .l1wid.mb
menu .l1wid.mb
menu .l1wid.mb.file
menu .l1wid.mb.load
menu .l1wid.mb.options
menu .l1wid.mb.graph
.l1wid.mb   add cascade -label File -underline 0 -menu .l1wid.mb.file

.l1wid.mb.file add command -label "Read Binary Data file..." -underline 0 -command {
  set _ytk_fn [ tk_getOpenFile -filetypes \
	{  
           {{Yorick PBD file} {.pbd}  }
           {{IDL Binary file} {.bin}  }
           {{IDL Binary file} {.edf}  }
	   {{All Files}       {*}   }
        }  ]
  if { $_ytk_fn != "" } {
    switch [ file extension $_ytk_fn ] {
    ".pbd" {  
	    set ytk_pbd_dir [ file dirname $_ytk_fn ]
            exp_send "_ytk_pbd_f = openb(\"$_ytk_fn\"); restore, _ytk_pbd_f;\r"
            exp_send "show, _ytk_pbd_f\r"
 	       toplevel .stby
            exp_send "\r"
            label .stby.lbl -text "Loading\n$_ytk_fn\nplease wait.."
            pack .stby.lbl
            expect ">"
	    update
  	    exp_send "set_read_tk \r"
            expect "Tk updated"
	    expect ">"
	    update
            set var_type [lindex $varlist [expr {[llength $varlist] -1}]]
	    update
            exp_send "set_read_yorick, $var_type \r"
 	    puts $var_type
            expect ">"
            destroy .stby
	    save_plot_settings [expr {[llength $varlist]-1}]
 	    if {$cbv == 1} {
		set cmin $cbvc(cmin)
		set cmax $cbvc(cmax)
		set msize $cbvc(msize)
		set markerv $cbvc(mtype) 
	    }
           }
     ".edf" -
     ".bin" {
        #global data_file_path 
        #if { [info exists data_file_path ] == 0 } {
        #      set data_file_path ""
        #}
	set ytk_bin_dir [ file dirname $_ytk_fn ]/
	set ytk_bin_file [ file tail $_ytk_fn ]
  	exp_send "data_ptr = read_yfile(\"$ytk_bin_dir\", fname_arr=\"$ytk_bin_file\"); \r"
	expect ">"
	exp_send "read_pointer_yfile, data_ptr, mode=1; \r"
	expect ">"
	set ptype [.l1wid.bf4.1.p getvalue]
     }
    }
  }
}

#.l1wid.mb.file add command -label "Read Data File... " -underline 10 -command {
#        global data_file_path 
#        if { [info exists data_file_path ] == 0 } {
#              set data_file_path ""
#        }
#  	exp_send "data_ptr = read_yfile(initialdir=\"$data_file_path\"); \r"
#	expect ">"
#	exp_send "read_pointer_yfile, data_ptr, mode=1; \r"
#	expect ">"
#	set ptype [.l1wid.bf4.1.p getvalue]
#	
##	if {$ptype == 0} {
##	  exp_send "fs_all = *data_ptr(1);\r"
##	  expect ">"
##	}
##	if {$ptype == 1} {
##	  exp_send "depth_all = *data_ptr(1);\r"
##	  expect ">"
##	}
##	if {$ptype == 2} {
##	  exp_send "veg_all = *data_ptr(1);\r"
##	  expect ">"
##	}
#
#  }
	


.l1wid.mb.file add command -label "Write Binary Data File..." -underline 0 -command {
	global write_some data_file_path
        if { [info exists data_file_path ] == 0 } {
              set data_file_path "~/"
        }
	destroy .l1write
        toplevel .l1write
	frame .l1write.1
	frame .l1write.2
	frame .l1write.3
         set ftypes {
                  {{For pbd}       {.pbd}        }
                  {{IDL bin}       {.bin}        }
                  {{IDL edf}       {.edf}        }
                  {{All Files}            *      }
              }
        set ptype [.l1wid.bf4.1.p getvalue]
        set var_no [.l1wid.bf45.p.15 getvalue]
        set var_type [lindex $varlist $var_no]
	LabelEntry .l1write.1.path  -width 30 -relief sunken -bd 3 -label "Output Path:  " -helptext "Enter Output Data Path Here" \
		-textvariable ofname -text $data_file_path
 	Button .l1write.1.browse -text "Browse..." -width 10 -command {
           set ofname [ tk_getSaveFile -filetypes $ftypes -defaultextension ".pbd" ]
        }
	LabelEntry .l1write.2.varname -width 10 -relief sunken -bd 3 -label "Variable Name: " -helptext "Enter Name of Variable to Write to file"  -textvariable var_type -text $var_type
	LabelEntry .l1write.2.plyname -width 10 -relief sunken -bd 3 -label "PLY Name: " -helptext "Enter ply name to Write to file; Leave it empty if you don't want to write out ply data"  -textvariable ply_type -text ""
	LabelEntry .l1write.2.qname -width 10 -relief sunken -bd 3 -label "GGA(q) Name: " -helptext "Enter q name to Write to file; Leave it empty if you don't want to write out gga data"  -textvariable q_type -text ""
    Button .l1write.3.ok -text "OK" -width 5 -command {
	if { $ofname != "" }  {
         switch [ file extension $ofname ] {
          ".pbd" {
 	      if {($ply_type == "") && ($q_type == "")} {
		exp_send "vname=\"$var_type\"; save, createb(\"$ofname\"), vname, $var_type; \r";
	      }
 	      if {($ply_type == "") && !($q_type == "")} {
		exp_send "vname=\"$var_type\"; qname = \"$q_type\"; save, createb(\"$ofname\"), vname, $var_type, qname, $q_type; \r";
	      }
 	      if {!($ply_type == "") && !($q_type == "")} {
		exp_send "vname=\"$var_type\"; qname = \"$q_type\"; plyname = \"$ply_type\"; save, createb(\"$ofname\"), vname, $var_type, qname, $q_type, plyname, $ply_type; \r";
	      }
          }
          ".bin" - 
          ".edf" {
          set opath  "[ file dirname $ofname ]/";
	  set ofname [ file tail    $ofname ];
    	  if { ![ string equal  "" $ofname ] } {
 	    if {$ptype == 0} {
	     if {$write_some == 0} {
 	       exp_send "write_topo, \"$opath\", \"$ofname\", $var_type; \r";
	       expect ">"
	     } else {
 	       exp_send "write_topo, \"$opath\", \"$ofname\", fs_some; \r";
	       expect ">"
	     }  
	    }
 	    if {$ptype == 1} {
	     if {$write_some == 0} {
      	       exp_send "write_bathy, \"$opath\", \"$ofname\", $var_type; \r";
	       expect ">"
	     } else {
      	       exp_send "write_bathy, \"$opath\", \"$ofname\", depth_some; \r";
	       expect ">"
   	     }	
	    }
 	    if {$ptype == 2} {
	     if {$write_some == 0} {
      	       exp_send "write_veg, \"$opath\", \"$ofname\", $var_type; \r";
	       expect ">"
	     } else {
      	       exp_send "write_veg, \"$opath\", \"$ofname\", veg_some; \r";
	       expect ">"
   	     }	
	    }
 	    if {$ptype == 3} {
	     if {$write_some == 0} {
      	       exp_send "write_multipeak_veg, $var_type, opath=\"$opath\", ofname=\"$ofname\"; \r";
	       expect ">"
	     } else {
      	       exp_send "write_multipeak_veg, cveg_some, opath=\"$opath\", ofname=\"$ofname\"; \r";
	       expect ">"
   	     }	
	    }
    	  } else { 
       	    tk_messageBox  -icon warning \
            -message "You need to specify an output file name" \
            -type ok
          }
	  set write_some 0
        }
       }
      }
   }
   Button .l1write.3.cancel -text "Cancel" -width 5 -command {
	   destroy .l1write
   }
   pack .l1write.1.path .l1write.1.browse -side left -padx 5
   pack .l1write.2.varname .l1write.2.plyname .l1write.2.qname -side left -padx 5
   pack .l1write.3.ok .l1write.3.cancel -side left -padx 5
   pack .l1write.1 .l1write.2 .l1write.3
  }

.l1wid.mb.file add command -label "Read SubSampled Data File..." -underline 0 -command {
        global data_file_path
  	set ofn [ tk_getOpenFile -filetypes \
	  {  
           {{Yorick PBD file} {.pbd}  }
	   {{All Files}       {*}   }
          }  ]
	destroy .l1ss
	toplevel .l1ss
	wm title .l1ss "Read SubSampled Data File"
        LabelFrame .l1ss.1 -relief groove -borderwidth 3 -text "Points to skip:"
	frame .l1ss.2
  	SpinBox .l1ss.1.sk \
	-range {1 1000 1} \
	-textvariable skip \
	-helptext "Enter points to skip (Subsample)" \
	-width 5
	LabelEntry .l1ss.1.mvar -label "Variable Name: " -width 10 -bd 3 \
		-helptext "Enter Variable Name of Data array after merging" \
		-textvariable mvar
 	Button .l1ss.2.ok -text "OK" -width 5 -command {
	   exp_send "$mvar = subsample_pbd_data(fname=\"$ofn\", skip = $skip);\r"
	   destroy .l1ss
	}
 	Button .l1ss.2.cancel -text "Cancel" -width 5 -command {
	   destroy .l1ss
 	}
	pack .l1ss.1.sk .l1ss.1.mvar -side left -padx 5
	pack .l1ss.2.ok .l1ss.2.cancel -side left -padx 5  
	pack .l1ss.1 .l1ss.2 -pady 5
	
}


.l1wid.mb.file add command -label "Read Data Directory... " -underline 10 -command {
	global data_file_path
        if { [info exists data_file_path ] == 0 } {
              set data_file_path "~/"
        }
	destroy .l1dir
        toplevel .l1dir
	frame .l1dir.1
	frame .l1dir.2
        wm title .l1dir "Read Data Directory"
        LabelFrame .l1dir.3 -relief groove -borderwidth 3 -text "Options:"
	LabelEntry .l1dir.2.op  -width 50 -relief sunken -bd 3 -label "Path:  " -helptext "Enter Data Path Here" \
		-textvariable path -text $data_file_path
        Button .l1dir.2.fbutton -text "Browse..." \
	 -command {
	   global data_file_path
           set path [ tk_chooseDirectory -initialdir $data_file_path -mustexist 1 -title "Read Data Directory" ]/
	}
	
        ComboBox .l1dir.3.dtype -text "Data Type..." -width 10 \
	-helptext "Select Data File type" \
	-editable 0 \
	-values { pbd edf bin } \
	-takefocus 0 \
	-modifycmd {
	  set dtype [.l1dir.3.dtype getvalue]
	  if {$dtype == 0} {
	     .l1dir.3.skip configure -state normal
	     .l1dir.3.mvar configure -state normal
	  } else {
	     .l1dir.3.skip configure -state disabled
	     .l1dir.3.mvar configure -state disabled
	  }
	}

	LabelEntry .l1dir.3.mvar -label "Merged Variable Name: " -width 8 -bd 3 \
		-helptext "Enter Variable Name of Data array after merging" \
		-textvariable mvar


	Label .l1dir.3.skL -text "Subsample: "

  	SpinBox .l1dir.3.skip \
	-range {1 1000 1} \
	-textvariable skip \
	-helptext "Enter plot points to skip" \
	-width 5

	LabelEntry .l1dir.3.ssvar -label "Search String: " -width 8 -bd 3 \
		-helptext "Enter search string" \
		-textvariable ssvar
 	Button .l1dir.1.ok -text "OK" -width 5 -command {
	 if {$path != ""} {
	  .l1dir.2.op configure -state disabled
	  .l1dir.1.ok configure -state disabled
	  set dtype [.l1dir.3.dtype getvalue]
	  if {$dtype == 0}  {
	     	exp_send "$mvar = merge_data_pbds(\"$path\", skip = $skip, searchstring=\"$ssvar\"); \r"
		destroy .l1dir
	  }
  	  if {$dtype == 1 || $dtype == 2} {
  	  	exp_send "data_ptr = read_yfile(\"$path\"); \r"
	  	expect ">"
          	exp_send "read_pointer_yfile, data_ptr, mode=1; \r"
	  	expect ">"
	  	set ptype [.l1wid.bf4.1.p getvalue]
	  	destroy .l1dir
	  }
	 }
	}
	.l1dir.3.skip configure -state disabled
	   
 	Button .l1dir.1.cancel -text "Cancel" -width 5 -command {
	   destroy .l1dir
 	}
	pack .l1dir.1.ok .l1dir.1.cancel -side left -padx 5
	pack .l1dir.2.op .l1dir.2.fbutton -side left -padx 5
	pack .l1dir.3.dtype .l1dir.3.mvar .l1dir.3.skL .l1dir.3.skip .l1dir.3.ssvar -side left -padx 3
	pack .l1dir.2 .l1dir.3 .l1dir.1 -side top -pady 5	
}
.l1wid.mb.file add command -label "Ascii output ..." -underline 0 \
  -command {
	global cmin cmax  opath ofile
	global write_asc_some
        if { [ info exists data_path ]  == 0} {
	     set data_path "~/"
        }
        set delimit "space"
	set indx 0
      	set intensity 0
	set rn 0
	set split 0
	set zclip 0
	set opath $data_path
	set zmin $cmin
	set zmax $cmax
         set ftypes {
                  {{For QTViewer}       {.xyz}        }
                  {{Generic ASCII}      {.asc}        }
                  {{Simple txt}         {.txt}      TEXT}
                  {{All Files}            *             }
              }

	destroy .l1asc
        toplevel .l1asc
	set w .l1asc
	$w configure -menu $w.mb
 	menu $w.mb
	menu $w.mb.file
        $w.mb add cascade -label File     -underline 0 -menu $w.mb.file
	$w.mb.file add command -label "File..." \
	   -command { set ofname [ tk_getSaveFile \
			           -filetypes $ftypes \
		                   -initialdir $data_path \
                                   -defaultextension xyz \
                                ];
		   if { $ofname != "" } {
                      set opath  "[ file dirname $ofname ]/";
                      set ofname [ file tail    $ofname ];
####		      .l1asc.cmd.ok configure -state normal;

	    #.l1asc.ops configure -state disabled
	    #.l1asc.fn.of configure -state disabled
	    #.l1asc.cmd.ok configure -state disabled

        set ptype [.l1wid.bf4.1.p getvalue]
  	set dtype [.l1wid.bf45.p.5 getvalue]
        set var_no [.l1wid.bf45.p.15 getvalue]
        set var_type [lindex $varlist $var_no]
	    if {$zclip == 0} { set zclips  "\[\]" } 
	    if {$zclip == 1} { set zclips "\[$zmin, $zmax\]"}
	    if {$delimit == "space"} {
		set de "\" \""		
	    } 
	    if {$delimit == "comma"} {
		set de "\",\""		
	    } 
	    if {$delimit == "semicolon"} {
		set de "\";\""		
	    } 
	   

 	    if {$ptype == 0} {
 	       exp_send "write_ascii_xyz, $var_type, \"$opath\", \"$ofname\", type=1, indx=$indx, split=$split, intensity=$intensity, delimit=$de, zclip=$zclips, pstruc=FS, rn=$rn; \r";
	       expect ">"
	    }
 	    if {$ptype == 1} {
	      if {$dtype == 0} {
 	       exp_send "write_ascii_xyz, $var_type, \"$opath\", \"$ofname\", type=1, indx=$indx, split=$split, intensity=$intensity, delimit=$de, zclip=$zclips, pstruc=GEO, rn=$rn; \r";
	      } else {
 	       exp_send "write_ascii_xyz, $var_type, \"$opath\", \"$ofname\", type=2, indx=$indx, split=$split, intensity=$intensity, delimit=$de, zclip=$zclips, pstruc=GEO, rn=$rn; \r";
	      }
	       expect ">"
	    } 
 	    if {$ptype == 2} {
	      if {$dtype == 0} {
 	       exp_send "write_ascii_xyz, $var_type, \"$opath\", \"$ofname\", type=1, indx=$indx, split=$split, intensity=$intensity, delimit=$de, zclip=$zclips, pstruc=VEG__, rn=$rn; \r";
	      } else {
 	       exp_send "write_ascii_xyz, $var_type, \"$opath\", \"$ofname\", type=3, indx=$indx, split=$split, intensity=$intensity, delimit=$de, zclip=$zclips, pstruc=VEG__, rn=$rn; \r";
	      } 

	      expect ">"
	    }
 	    if {$ptype == 3} {
 	       exp_send "write_ascii_xyz, $var_type, \"$opath\", \"$ofname\", type=1, indx=$indx, split=$split, intensity=$intensity, delimit=$de, zclip=$zclips, pstruc=CVEG_ALL, rn=$rn; \r";
	       expect ">"
	    }
	    #destroy .l1asc
	  set write_some 0
	 }

        }

        wm title .l1asc "Write Ascii Data"
        LabelFrame .l1asc.ops -relief groove -borderwidth 3 -text "Options:"
        frame .l1asc.ops.1 -relief groove -borderwidth 3
        frame .l1asc.ops.2 -relief groove -borderwidth 3
        frame .l1asc.fn -relief groove -borderwidth 3
        frame .l1asc.cmd -relief groove -borderwidth 3
        set ptype [.l1wid.bf4.1.p getvalue]
        set var_no [.l1wid.bf45.p.15 getvalue]
        set var_type [lindex $varlist $var_no]

        label .l1asc.ops.1.dl -text "Delimiter: " 
        tk_optionMenu .l1asc.ops.1.d delimit comma semicolon space
        # grid .l1asc.ops.dl .l1asc.ops.d -sticky ew 
        Separator .l1asc.ops.1.s1 -orient vertical -bg black -relief groove 
      
        checkbutton .l1asc.ops.1.indx -text "Include Index Number" -variable indx 
        Separator .l1asc.ops.1.s2 -orient vertical -bg black -relief groove 

        checkbutton .l1asc.ops.1.rn -text "Include Raster/Pulse Number" -variable rn 
        Separator .l1asc.ops.1.s3 -orient vertical -bg black -relief groove 

        checkbutton .l1asc.ops.1.int -text "Include Intensity Data" -variable intensity 

        LabelEntry .l1asc.ops.2.split -width 10 -bd 3 -label "Max number of lines/file" \
		-helptext "Enter maximum number of lines in each file; enter 0 to write all data in 1 file" \
		-textvariable split 

        checkbutton .l1asc.ops.2.zclip -text "Z Clipper:" -variable zclip \
		-command {
		   if {$zclip == 1} {
			.l1asc.ops.2.zmin configure -state normal
			.l1asc.ops.2.zmax configure -state normal
		   } 
		   if {$zclip == 0} {
			.l1asc.ops.2.zmin configure -state disabled
			.l1asc.ops.2.zmax configure -state disabled
		   }
           	 }
    	LabelEntry .l1asc.ops.2.zmin -width 5 -bd 3 -label "Zmin" \
		-textvariable zmin -state disabled
    	LabelEntry .l1asc.ops.2.zmax -width 5 -bd 3 -label "Zmax" \
		-textvariable zmax -state disabled

        pack .l1asc.ops.1.indx .l1asc.ops.1.s1 .l1asc.ops.1.rn .l1asc.ops.1.s3 .l1asc.ops.1.int .l1asc.ops.1.s2 .l1asc.ops.1.dl .l1asc.ops.1.d  -side left -fill both -padx 3

 	pack .l1asc.ops.2.split .l1asc.ops.2.zclip .l1asc.ops.2.zmin .l1asc.ops.2.zmax -side left -padx 3 -fill both
	pack .l1asc.ops.1 .l1asc.ops.2 -side top
 
 	Button .l1asc.cmd.cancel -text "Cancel" -width 5 -command {
	   set write_some 0
	   destroy .l1asc
 	}
 	Button .l1asc.cmd.dismiss -text "Dismiss" -width 5 -command {
	   destroy .l1asc
 	}
	pack .l1asc.cmd.cancel .l1asc.cmd.dismiss -side left -padx 5
###	pack .l1asc.fn.op .l1asc.fn.of -side top -pady 5	
        #pack .l1asc.ops.indx .l1asc.ops.int -side left
        pack .l1asc.ops .l1asc.fn .l1asc.cmd -side top
  }

.l1wid.mb       add cascade -label "Load" -underline 0 -menu .l1wid.mb.load
.l1wid.mb.file  add command -label "Dismiss" -underline 0 -command {destroy .l1wid}
.l1wid.mb.load  add command -label "Load TANS Data .. " -underline 5 \
		-command { exp_send "tans = rbtans();\r" 
			   expect ">"
			 }

.l1wid.mb.load add command -label "Load PNAV Data .. " -underline 5 \
	-command { exp_send "pnav = rbpnav(); \r"
			 }

.l1wid.mb.load add command -label "Initialize structure BATHCTL .." -underline 21 \
	-command { 
   	  # show constants in GUI
	  destroy .bathctl
	  toplevel .bathctl
	  ComboBox .bathctl.type -text "Select Type" -width 12 -values "Florida_Keys Tampa_Bay West_Virginia" \
		-helptext "Select type.." -editable 0 \
		-modifycmd {
              set typeval [.bathctl.type getvalue]
	      if {$typeval == 0} {set type "keys"}
	      if {$typeval == 1} {set type "tampabay"}
	      if {$typeval == 2} {set type  "wva"}
              exp_send "type = define_bath_ctl(type=\"$type\"); \r"
		}
		
          sst .bathctl.laser   laser   "  Laser:"  { -10 10.0 0.1  }
	  #LabelEntry .bathctl.laser  -width 5 -relief sunken -bd 3 -label "Laser " \
	#	-helptext "Laser Decay Constant" \
	#	-textvariable laser \
	#	-command {
	#	    .bathctl.type configure -state disabled
	#	 }
	  
          sst .bathctl.water   water   "  Water:"  { -20 20.0 0.1  }
	  #LabelEntry .bathctl.water  -width 5 -relief sunken -bd 3 -label "Water " \
	#	-helptext "Water Column Constant" \
	#	-textvariable water \
	#	-command {
	#	    .bathctl.type configure -state disabled
	#	 }

          sst .bathctl.agc   agc   "  AGC:"  { -20 20.0 0.1  }
	  #LabelEntry .bathctl.agc  -width 5 -relief sunken -bd 3 -label "AGC " \
	#	-helptext "Attenuation Gain Constant" \
	#	-textvariable agc \
	#	-command {
	#	    .bathctl.type configure -state disabled
	#	 }

          sst .bathctl.thresh   thresh   "  Threshold:"  { 0 20.0 0.1  }
	  #LabelEntry .bathctl.thresh  -width 5 -relief sunken -bd 3 -label "Threshold " \
	#	-helptext "Threshold" \
	#	-textvariable thresh \
	#	-command {
	#	    .bathctl.type configure -state disabled
	#	 }

          sst .bathctl.last   last   "  Last:"  { 0 20.0 1  }
	  #LabelEntry .bathctl.last  -width 5 -relief sunken -bd 3 -label "Last " \
	#	-helptext "Last (nanosecond)" \
	#	-textvariable last \
	#	-command {
	#	    .bathctl.type configure -state disabled
	#	 }
 		   
          
	  Button .bathctl.ok -text "OK" -width 5 -command {
	    if {[.bathctl.type cget -state] == "disabled"} {
 		exp_send "bath_ctl.laser = $laser; bath_ctl.water=$water; bath_ctl.agc=$agc; bath_ctl.thresh = $thresh; bath_ctl.last = $last; \r"
	    } else {
 		exp_send "bath_ctl.laser = $laser; bath_ctl.water=$water; bath_ctl.agc=$agc; bath_ctl.thresh = $thresh; bath_ctl.last = $last; \r"
	    }
	    .bathctl.type configure -state normal
	  }
	 
	  Button .bathctl.cancel -text "Cancel" -width 5 -command {
	    .bathctl.type configure -state normal
	    destroy .bathctl
	  }


	  pack .bathctl.type -side top 
	  pack .bathctl.laser .bathctl.water .bathctl.agc  .bathctl.thresh .bathctl.last  -side top
	  pack .bathctl.ok .bathctl.cancel -side left

}


.l1wid.mb add cascade -label Options -underline 0 -menu .l1wid.mb.options



.l1wid.mb.options add command -label "Configure elevation scale limits..." -underline 0 \
	-command { 
	   destroy  .l1wid-opts
 	   toplevel .l1wid-opts
	   frame .l1wid-opts.f1
	   frame .l1wid-opts.f2
	   frame .l1wid-opts.f3
	   Label .l1wid-opts.f1.label -text "Maximum:" 
	   Label .l1wid-opts.f2.label -text "Minimum:" 
	   Label .l1wid-opts.f3.label -text "Increment:" 
	   SpinBox  .l1wid-opts.f1.max -range { -100. 5000. 10. }  \
		-textvariable cmax_max \
		-modifycmd {  .l1wid.bf45.sc.1.cmax.sc configure -to $cmax_max }
	   SpinBox  .l1wid-opts.f2.min -range { -100. 5000. 10. }  \
                -textvariable cmax_min \
                -modifycmd {  .l1wid.bf45.sc.1.cmax.sc configure -from $cmax_min }
	   SpinBox  .l1wid-opts.f3.inc \
		-values { 0.1 0.2 .25 .5 .75 1.0 1.5 2.0 2.5 3 4 5 6 7 8 9 10 15 20 25 }  \
                -textvariable cmax_inc \
                -modifycmd {  .l1wid.bf45.sc.1.cmax.sc configure -resolution $cmax_inc }

	   pack .l1wid-opts.f1.label .l1wid-opts.f1.max -side left -fill x
	   pack .l1wid-opts.f2.label .l1wid-opts.f2.min -side left -fill x
	   pack .l1wid-opts.f3.label .l1wid-opts.f3.inc -side left -fill x
	   pack .l1wid-opts.f1 .l1wid-opts.f2 .l1wid-opts.f3 -side top -anchor e
         }
.l1wid.mb.options add checkbutton -label "Log Historgrams" -underline 0 \
	-variable hist_log \
	-command hist_linlog 

.l1wid.mb.options add command -label "Plot/Write Indvidual Flightlines..." -underline 0 \
 -command {
    global list lrnindx
    destroy .l1plot
    toplevel .l1plot 
    wm title .l1plot "Plot / Write Selected Flightlines"
    frame .l1plot.1
    listbox .l1plot.1.lb -selectmode extended -width 50 -xscrollcommand ".l1plot.xscroll set" -yscrollcommand ".l1plot.1.yscroll set" 
    scrollbar .l1plot.xscroll -orient horizontal -command [list .l1plot.1.lb xview]
    scrollbar .l1plot.1.yscroll -command [list .l1plot.1.lb yview]
    for {set i 0} { $i < [llength $lrnindx] } {incr i} { 
       set e [lindex $lrnindx $i]
       set rnf [lindex $list [expr ($i*2)]]
       set rnl [lindex $list [expr ($i*2+1)]]
       .l1plot.1.lb insert end "Flightline $i. Rasters $rnf to $rnl. Start Index = $e" 
    }
    
    Button .l1plot.sall -text "Select All" -width 10 -command {
        .l1plot.1.lb selection set 0 [llength $lrnindx]
    }

    Button .l1plot.clear -text "Clear All" -width 10 -command {
        .l1plot.1.lb delete 0 end
       set list {}
       set lrnindx {}
    }

    Button .l1plot.plot -text "Plot" -width 6 -command {
	make_selected_arrays {junk}
	plot_fltlines 1
	
    }
#    Button .l1plot.write -text "Write Datafile" -command {
#	 set write_some 1
#	 make_selected_arrays {junk}
#        .l1wid.bf5.1 invoke	
#    }

    pack .l1plot.1.lb .l1plot.1.yscroll -side left -fill y 
    pack .l1plot.1 .l1plot.xscroll -side top -fill x
    pack .l1plot.sall .l1plot.clear .l1plot.plot .l1plot.write -side left -fill x
}

.l1wid.mb.options add command -label "Show Flightlines with No Raster Data..." -underline 25 \
 -command {
   exp_send "plot_no_raster_fltlines(gga, edb);\r"
 }

.l1wid.mb.options add command -label "Show Flightlines with No TANS Data..." -underline 25 \
 -command {
   exp_send "plot_no_tans_fltlines(tans, gga);\r"
 }

.l1wid.mb.options add command -label "List Plot Variables..." -underline 10 -command {
    varlist_plot
}

proc varlist_plot {} {
    global varlist
    destroy .varplot
    toplevel .varplot 
    wm title .varplot "List"
    frame .varplot.1
    frame .varplot.2
    listbox .varplot.1.lb -selectmode single -width 12 -xscrollcommand ".varplot.xscroll set" -yscrollcommand ".varplot.1.yscroll set" 
    scrollbar .varplot.xscroll -orient horizontal -command [list .varplot.1.lb xview]
    scrollbar .varplot.1.yscroll -command [list .varplot.1.lb yview]
    for {set i 0} { $i < [llength $varlist] } {incr i} { 
       .varplot.1.lb insert end [lindex $varlist $i]
    }
    Button .varplot.2.select -text "Select" -command {
      set plot_var [lindex $varlist [.varplot.1.lb curselection]]
      .l1wid.bf45.p.15 setvalue @[.varplot.1.lb curselection]
    }
    LabelEntry .varplot.2.add -width 8 -relief sunken -label "Add:" -helptext "Add variable name to list" \
      -textvariable addvar 
    .varplot.2.add bind <Return> { 
        global varlist
	lappend varlist $addvar
        .l1wid.bf45.p.15 configure -values $varlist
        .varplot.1.lb insert end $addvar
    }
    Button .varplot.2.delete -width 8 -text "Delete" \
       -command {
         set del_no [.varplot.1.lb curselection]
         if {$del_no <= 3} {
          # don't delete fixed variables
       	  tk_messageBox  -icon warning \
            -message "Cannot delete this variable" \
             -type ok
         } else {
          set del_var [lindex $varlist $del_no]
          set new_varlist1 [lrange $varlist 0 [expr ($del_no-1)]]
          set new_varlist2 [lrange $varlist [expr ($del_no+1)] end]
	  .varplot.1.lb delete $del_no $del_no	
          set varlist [concat $new_varlist1 $new_varlist2]
          .l1wid.bf45.p.15 configure -values $varlist
         }
    }
    Button .varplot.2.dismiss -text "Dismiss" -width 8 -command {
          destroy .varplot
    }
    pack .varplot.1.lb .varplot.1.yscroll -side left -fill y 
    pack .varplot.2.select .varplot.2.add .varplot.2.delete .varplot.2.dismiss -side top -fill x
    pack .varplot.1 .varplot.xscroll .varplot.2 -side top -fill x
  }

.l1wid.mb.options add checkbutton -label "Constant Colorbar for Variables" \
	-variable cbv \
	-command {
  	    if {$cbv == 1} {
		global cbvc
		set cbvc(cmin) $cmin
		set cbvc(cmax) $cmax
		set cbvc(msize) $msize
		set cbvc(mtype) $markerv
 	    }
     	}
               

proc make_selected_arrays {junk} {
    global lrnindx list
    	set curlist [.l1plot.1.lb curselection]
        set ptype [.l1wid.bf4.1.p getvalue]
 	if {$ptype == 0} {
    	  exp_send "fs_some = \[\];\r"
	  expect ">"
	  foreach f $curlist {
           set fidx [lindex $lrnindx $f] 
	   set lidx [lindex $lrnindx [expr ($f+1)]]
	   if {[expr ($lidx-$fidx)] != 0} {
	    if {($lidx != "")} { 
	      set lidx [expr ($lidx - 1)]
 	      exp_send "grow, fs_some, fs_all($fidx:$lidx);\r"
	      expect ">"
	    } else {
	      exp_send "grow, fs_some, fs_all($fidx:);\r"
	      expect ">"
 	    }
	   }
    	  }
        }
 	if {$ptype == 1} {
    	  exp_send "depth_some = \[\];\r"
	  expect ">"
	  foreach f $curlist {
           set fidx [lindex $lrnindx $f] 
	   set lidx [lindex $lrnindx [expr ($f+1)]]
	   if {[expr ($lidx-$fidx)] != 0} {
	    if {$lidx != ""} {
	      set lidx [expr ($lidx - 1)]
 	      exp_send "grow, depth_some, depth_all($fidx:$lidx);\r"
	      expect ">"
	    } else {
	      exp_send "grow, depth_some, depth_all($fidx:);\r"
	      expect ">"
 	    }
	   }
    	  }
        }
 	if {$ptype == 2} {
    	  exp_send "veg_some = \[\];\r"
	  expect ">"
	  foreach f $curlist {
           set fidx [lindex $lrnindx $f] 
	   set lidx [lindex $lrnindx [expr ($f+1)]]
	   if {[expr ($lidx-$fidx)] != 0} {
	    if {$lidx != ""} {
	      set lidx [expr ($lidx - 1)]
 	      exp_send "grow, veg_some, veg_all($fidx:$lidx);\r"
	      expect ">"
	    } else {
	      exp_send "grow, veg_some, veg_all($fidx:);\r"
	      expect ">"
 	    }
	   }
    	  }
        }
 	if {$ptype == 3} {
    	  exp_send "cveg_some = \[\];\r"
	  expect ">"
	  foreach f $curlist {
           set fidx [lindex $lrnindx $f] 
	   set lidx [lindex $lrnindx [expr ($f+1)]]
	   if {[expr ($lidx-$fidx)] != 0} {
	    if {$lidx != ""} {
	      set lidx [expr ($lidx - 1)]
 	      exp_send "grow, cveg_some, cveg_all($fidx:$lidx);\r"
	      expect ">"
	    } else {
	      exp_send "grow, cveg_some, cveg_all($fidx:);\r"
	      expect ">"
 	    }
	   }
    	  }
        }
}
    
proc hist_linlog {} {
 global hist_log
       exp_send "_win=window();window,0;\
  logxy,0,$hist_log; range,$hist_log;window,_win \r"
}


.l1wid.mb   add cascade -label Graph -underline 0 -menu .l1wid.mb.graph
.l1wid.mb.graph add radiobutton \
        -label "75 Dpi (450x450)" -value "75" -variable plot_dpi -underline 1
.l1wid.mb.graph add radiobutton \
        -label "100 Dpi (600x600)" -value "100" -variable plot_dpi -underline 1
.l1wid.mb.graph add radiobutton \
        -label "100 Dpi (1100x850)" -value "1100" -variable plot_dpi -underline 1



ComboBox .l1wid.bf4.1.d -text "Define Region using..." -width 22 -values "Rubberband-Box Points-in-Polygon Line-Segment Enter_Rectangular_Coordinates Multiple-PIPs" -helptext "Select region to process using any of the following methods" -editable 0 -modifycmd {
    set defr [.l1wid.bf4.1.d getvalue]
    puts $defr
    if {$defr == 0} {
       	tk_messageBox  -icon info \
        -message "Drag a Rectangular Box in Window 6 to define region." \
        -type ok -title "Message"
       exp_send "q = gga_win_sel(2, win=$_map(window));\r"
       expect ">"
    }
    if {$defr == 1} {
       	tk_messageBox  -icon info \
        -message "Draw a Polygon in Window 6 to define a region using a series of left mouse clicks.  To complete the polygon, middle mouse click OR <Ctrl> and left mouse click." \
        -type ok -title "Message"
       exp_send "q = gga_pip_sel(1, win=$_map(window));\r"
       expect ">"
    }
    if {$defr == 2} {
       exp_send "q = gga_click_sel(1, win=$_map(window));\r"
       expect ">"
    }
    if {$defr == 3} {
        destroy .l1widc
        toplevel .l1widc
	frame .l1widc.lon
	frame .l1widc.1
	frame .l1widc.utm
	ComboBox .l1widc.utm.1 -text "Coordinate System" -width 18 -values "LatLon UTM" \
		-helptext "Select the Coordinate System." -editable 0 
	LabelEntry .l1widc.utm.2 -width 6 -relief sunken  -label "UTM Zone: " -helptext "Enter UTM Zone Here" \
		-textvariable zone 

	LabelEntry .l1widc.lat1 -width 12 -relief sunken -label "NorthLat/Max.Northing " \
		-helptext "Enter Maximum Latitude in degrees or Maximum UTM Northing in meters Here"\
		-textvariable mxlat
	LabelEntry .l1widc.lat2 -width 12 -relief sunken -label "SouthLat/Min.Northing  " \
		-helptext "Enter Minimum Latitude in degrees or Minimum UTM Northing in meters Here"\
		-textvariable mnlat

	LabelEntry .l1widc.lon.mn -width 12 -relief sunken -label "WestLon/Min.Easting  " \
		-helptext "Enter Westernmost Longitude in degrees or Minimum UTM Easting in meters Here"\
		-textvariable mnlon
	LabelEntry .l1widc.lon.mx -width 12 -relief sunken -label "EastLon/Max.Easting " \
		-helptext "Enter Easternmost Longitude in degrees or Maximum UTM Easting in meters Here"\
		-textvariable mxlon
	Button .l1widc.1.ok -text "OK" -width 5 -command {
          set utm [.l1widc.utm.1 getvalue]
          exp_send "utm = $utm; q = gga_win_sel(2, win=$_map(window), llarr=\[$mnlon, $mxlon, $mnlat, $mxlat\]);\r"
	  destroy .l1widc
	}
	Button .l1widc.1.box -text "Plot Region" -width 7 -command {
	   exp_send "a_x=\[$mnlon, $mxlon, $mxlon, $mnlon, $mnlon\];\r"
	   exp_send "a_y=\[$mnlat, $mnlat, $mxlat, $mxlat, $mnlat\];\r"
	   exp_send "window, $_map(window); plg, a_y, a_x;\r";
	}

	  
	Button .l1widc.1.cancel -text "Cancel" -width 5 -command {
	  destroy .l1widc
	}
	pack .l1widc.utm.1 .l1widc.utm.2 -side left 
	pack .l1widc.lon.mn .l1widc.lon.mx -side left -padx 4
	pack .l1widc.utm .l1widc.lat1 .l1widc.lon .l1widc.lat2 -side top -pady 5
	pack .l1widc.1.ok .l1widc.1.box .l1widc.1.cancel -side left
	pack .l1widc.1 -side top


   }
   if {$defr == 4} {
        exp_send "q = \[\]\r"
        expect ">"
	multi_pip_sel {}
   }
   if {$defr == -1} {
	error "Please Define Region."
   }
} 

proc multi_pip_sel {junk} {
    global _map tpath
    destroy .mpip
    toplevel .mpip
    frame .mpip.1
    frame .mpip.2

    global row 
    set row 20
    set tpath .mpip.1.table
    table $tpath \
	-rows $row \
	-cols 6 \
	-variable _mpipx \
	-titlerows 2 \
	-titlecols 0 \
	-yscrollcommand [list ".mpip.1.sy" set] \
	-xscrollcommand [list ".mpip.1.sx" set] \
	-coltagcommand colorize \
	-flashmode 1 \
	-selectmode extended \
	-width 5 -height 8 \
	-colwidth 15 \
	-multiline 0 \
	-sparsearray 0 \
	-browsecommand {set table(current) %S} 
    $tpath tag configure active \
	-fg blue \
	-relief sunken

    $tpath width 0 7
    $tpath width 3 25
    $tpath height 1 2

    scrollbar .mpip.1.sy -command [list $tpath yview]
    scrollbar .mpip.1.sx -command [list $tpath xview] -orient horizontal

    Button $tpath.pip -text "PIP Selector" \
	-command {
		global tpath varc _map pcurs
		set curs [$tpath curselection]
		if { [info exists curs] == 0 } {
		  if { [info exists pcurs] == 1 } {
			set curs $pcurs
		  } else {
			set curs "2,1"
		  }
		}
	  	set cidx [string first "," $curs]
		set cursr [string range $curs 0 [expr ($cidx-1)]]
		set cursc [string range $curs [expr ($cidx+1)] end]
        	if { ([info exists _mpipx($cursr,2) ] == 0) || ($_mpipx($cursr,2)=="") } {
		   set _mpipx($cursr,2) "ply_$cursr"
		   set _mpipx($cursr,5) "q_$cursr"
		}
        	if { [info exists _mpipx($cursr,1) ] == 0 } {
		   set _mpipx($cursr,1) "var_$_mpipx($cursr,2)"
		}
        	if { [info exists _mpipx($cursr,5) ] == 0 } {
		   set _mpipx($cursr,5) "q_$_mpipx($cursr,2)"
		}
		set pcurs $curs
       		exp_send "$_mpipx($cursr,5) = gga_pip_sel(1, win=$_map(window)); $_mpipx($cursr,2) = ply; \r"
       		expect ">"
	} \
        -helptext "Draw a Polygon in Window 6 to define a region using a series of left mouse clicks.  To complete the polygon, middle mouse click OR <Ctrl> and left mouse click." 
    $tpath window configure 1,2 -window $tpath.pip -sticky news

    Button $tpath.fbutton -text "Browse..." \
	-command {
	   global tpath
	   set curs [$tpath curselection]
           set ftypes {
                  {{For pbd}       {.pbd}        }
                  {{IDL bin}       {.bin}        }
                  {{IDL edf}       {.edf}        }
                  {{All Files}            *      }
           }
          set ofname [ tk_getSaveFile -filetypes $ftypes -defaultextension ".pbd" ]
	  set _mpipx($curs) $ofname
	   puts $curs
	}
    $tpath window configure 1,3 -window $tpath.fbutton -sticky news

    ComboBox $tpath.ptype -text "Process For..." -width 22 \
	-helptext "Process Data for any of the following" \
	-editable 0 \
	-values { SubAerial-Topography Bathymetry Vegetation Multi-peak-Vegetation} \
	-takefocus 0 \
	-modifycmd {
		global tpath
		set curs [$tpath curselection]
		set _mpipx($curs) [$tpath.ptype getvalue]
	} 
		
    $tpath window configure 1,4 -window $tpath.ptype -sticky news

    for {set seli 2} { $seli < $row } {incr seli} { 
      checkbutton $tpath.sel$seli -variable _mpipx($seli,0) 
      $tpath window configure $seli,0 -window $tpath.sel$seli -sticky news
    }

    Button .mpip.2.process -text "Process Now" -width 20 -bd 5 \
		-command \
     {
	global tpath _mpipx usecentroid data_var pip_var fname_var ptype_var
	set data_var "\["
	set pip_var "\["
	set qname_var "\["
	set fname_var "\["
	set ptype_var "\["
	set ply_var "\["
	set plyname_var "\["
        for {set seli 2} { $seli < $row } {incr seli} { 
	   if { $_mpipx($seli,0) == 1 } {
		append pip_var "&$_mpipx($seli,5),"
		append qname_var "\"$_mpipx($seli,5)\","
		append data_var "\"$_mpipx($seli,1)\","
		append fname_var "\"$_mpipx($seli,3)\","
		append ptype_var "$_mpipx($seli,4),"
		append ply_var "&$_mpipx($seli,2),"
		append plyname_var "\"$_mpipx($seli,2)\","
	    }
	}
	set pip_var [string replace $pip_var end end "\]"]
	set qname_var [string replace $qname_var end end "\]"]
	set data_var [string replace $data_var end end "\]"]
	set fname_var [string replace $fname_var end end "\]"]
	set ptype_var [string replace $ptype_var end end "\]"]
	set ply_var [string replace $ply_var end end "\]"]
	set plyname_var [string replace $plyname_var end end "\]"]
	exp_send "batch_multipip_process, $pip_var, $data_var, $fname_var, $ptype_var, $qname_var, $ply_var, $plyname_var \r\n"
	expect ">"
              
    }

    Button .mpip.2.delete -text "Delete Rows" -width 20 -bd 5 \
	-command \
    {
        global tpath _mpipx row 
        for {set seli 2} { $seli < $row } {incr seli} { 
	   if { $_mpipx($seli,0) == 1 } {
		set _mpipx($seli,0) 0
		$tpath delete rows $seli
		set row [expr {$row - 1}]
	   }
	}
    }
    .mpip.2.delete configure -state disabled
    Button .mpip.2.insert -text "Add Row" -width 20 -bd 5 \
	-command \
    {
        global tpath _mpipx row
	$tpath insert rows  [expr {$row-1}]
	set row [expr {$row + 1}]
    }
    .mpip.2.insert configure -state disabled
		
    pack .mpip.1.sx -side bottom -fill x
    pack .mpip.1.sy -side right -fill y
    pack .mpip.2.process .mpip.2.insert .mpip.2.delete -side left -padx 5
    pack $tpath -side left
    pack .mpip.1 .mpip.2 -side top

    
   # tk_messageBox  -icon info \
    #    -message "Draw a Polygon in Window 6 to define a region using a series of left mouse clicks.  To complete the polygon, hit middle mouse OR <Ctrl> and left mouse click." \
     #   -type ok -title "Message"
      #tk_messageBox -icon info \
#	-message "Select Region $ino" -type "ok" -title "Region $ino"
 #     exp_send "q = gga_pip_sel(1, win=$_map(window), multi=1);\r"
  #    expect ">"
}
   
ComboBox .l1wid.bf4.1.p -text "Process For..." -width 22 \
	-helptext "Process Data for any of the following" \
	-editable 0 \
	-values { SubAerial-Topography Bathymetry Vegetation Multi-peak-Vegetation}

.l1wid.bf4.1.p setvalue first

#checkbutton .l1wid.bf4.2.cll -text "Convert UTM\nto Lat Lon" -variable cll 
# checkbutton .l1wid.bf4.2.cng -text "Convert to\nNAVD 88 (GEOID)" -variable cng 
checkbutton .l1wid.bf4.2.cen -text "Correct Range \nWalk with Centroid" -variable usecentroid 


checkbutton .l1wid.bf45.p.fma -text "Auto\nFma" -variable l1pro_fma 

Button .l1wid.bf45.p.1 -text "Plot" -command {
 plot_fltlines 0
}

ComboBox .l1wid.bf45.p.15  -values \
  	$varlist \
	-helptext "Select any one of the following variables to plot" \
	-editable 0 \
	-modifycmd {
           global cmin cmax markerv msize varlist cbv
	   global  var_no var_type plist
           set var_no [.l1wid.bf45.p.15 getvalue]
	   #puts "$var_no"
	   set pvar_no [expr {$var_no + 1}]
           set var_type [lindex $varlist $var_no]
	   #puts "variable in modifycommand $var_type"
           if {$cbv == 0} {
	     retrieve_plot_settings $pvar_no
           }
	   #puts "***********************"
        } \
	-postcommand {
 	   global var_no var_type cmin cmax markerv msize varlist plist cbv
           set var_no [.l1wid.bf45.p.15 getvalue]
	   set pvar_no [expr {$var_no + 1}]
           set var_type [lindex $varlist $var_no]
	   #puts "variable in postcommand $var_type no $pvar_no"
	   if {$cbv == 0} {
	     save_plot_settings  $pvar_no
           }
   	   # foreach e [array names {_$var_type}] {
	   #  puts "$e:\t${_$var_type(msize)}"
           #}
 	   #puts "saved $var_type"
	   #puts "***********************"
        } 
.l1wid.bf45.p.15 setvalue first

proc retrieve_plot_settings {pvar_no} {
   global cmin cmax msize markerv var_type plist 
   #puts "to retrieve _$var_type from $var_type"
   #puts "pvar_no = $pvar_no"
   set cmin $plist(idx$pvar_no,cmin)
  #puts "$cmin read from  $plist(idx$pvar_no,cmin)"
   #puts "cmin = $cmin"
   set cmax $plist(idx$pvar_no,cmax)
   set msize $plist(idx$pvar_no,msize)
   set markerv $plist(idx$pvar_no,mtype)
   .l1wid.bf4.1.p setvalue @$plist(idx$pvar_no,ptype)
   .l1wid.bf45.p.5 setvalue @$plist(idx$pvar_no,dtype)
   
}

proc save_plot_settings {pvar_no} {
  global cmin cmax msize markerv var_type plist
  #puts "to save $var_type in _$var_type"
  set ptype [.l1wid.bf4.1.p getvalue]
  set dtype [.l1wid.bf45.p.5 getvalue]
  set plist(idx$pvar_no,cmin) $cmin
  #puts "$cmin written to $pvar_no = $plist(idx$pvar_no,cmin)"
  set plist(idx$pvar_no,cmax) $cmax
  set plist(idx$pvar_no,msize) $msize
  set plist(idx$pvar_no,mtype) $markerv
  set plist(idx$pvar_no,ptype) $ptype
  set plist(idx$pvar_no,dtype) $dtype
}
Label .l1wid.bf45.p.2 -text "in Win:"
SpinBox .l1wid.bf45.p.3 -justify center -range {0 7 1} \
	-width 2 -textvariable win_no 

ComboBox .l1wid.bf45.p.5 -text "Display Type" -width 20 -values \
	"First_Return_Topography Sub-aqueous_Topography \
	Water_Depth Bare_Earth_Topography Surface_Amplitude Bottom_Amplitude Canopy_Height" \
	-helptext "Select any one of the following" \
	-editable 0

.l1wid.bf45.p.5 setvalue first

Button .l1wid.bf45.q.2 -text "Histogram\nElevations" \
  -helptext "Generate and display a histogram of all the first return elevations" \
  -command {
      set ptype [.l1wid.bf4.1.p getvalue]
      set disp_type [.l1wid.bf45.p.5 getvalue]
      set var_no [.l1wid.bf45.p.15 getvalue]
      set var_type [lindex $varlist $var_no]
      if {$disp_type == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of data before using this function!" \
        -type ok
     }
     if {$ptype == 0} {
      exp_send "hst = hist_fs($var_type); \r"
     }
     if {$ptype == 1} {
      if {$disp_type == 0} {
   	exp_send "hst = hist_fs($var_type);\r"
      } else {
        exp_send "hst = hist_depth($var_type); \r"
      }
     }
     if {$ptype == 2} {
      if {$disp_type == 0} {
   	exp_send "hst = hist_fs($var_type);\r"
      } else {
        exp_send "hst = hist_veg($var_type); \r"
      }
     }
  }

Button .l1wid.bf45.q.1 -text "Pixel\nWaveform" \
  -helptext "Click to jump to raster, pulse, and image for xyz point" \
  -command {
     set ptype [.l1wid.bf4.1.p getvalue]
     set disp_type [.l1wid.bf45.p.5 getvalue]
     set var_no [.l1wid.bf45.p.15 getvalue]
     set var_type [lindex $varlist $var_no]
     if {$disp_type == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of data before using this function!" \
        -type ok
     }
     if {$ptype == 0} {
        exp_send "mindata = raspulsearch($var_type, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type, ptype=$ptype, lmark = lmark);\r"
     }
     if {$ptype == 1} {
        exp_send "mindata = raspulsearch($var_type, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type, ptype=$ptype, lmark = lmark );\r"
     }
     if {$ptype == 2} {
        exp_send "mindata = raspulsearch($var_type, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type, ptype=$ptype, lmark = lmark);\r"
     }
     if {$ptype == 3} {
        exp_send "mindata = raspulsearch($var_type, win=$win_no, cmin=$cmin, cmax=$cmax, msize=$msize, disp_type=$disp_type, ptype=$ptype, lmark = lmark);\r"
     }
   }
	   
Button .l1wid.bf45.q.3 -text "Color\nBar" \
	-command { 
        exp_send "colorbar, $cmin, $cmax, drag=1\r";
}
Button .l1wid.bf45.q.4 -text "Elevation\nClipper" \
		-command {
	destroy .l1clip
        toplevel .l1clip
        wm title .l1clip "Elevation Clipper"
	frame .l1clip.1
        set ptype [.l1wid.bf4.1.p getvalue]
	#SpinBox  .l1clip.max -range { -100. 5000. 10. }  \
	#	-textvariable max_elv -text "Maximum Elevation"
	#SpinBox  .l1clip.min -range { -100. 5000. 10. }  \
        #        -textvariable min_elv -text "Minimum Elevation"
	#SpinBox  .l1clip.range \
	#	-range { 1 100 } \
         #       -textvariable range_elv  -text "Vertical Range"
        checkbutton .l1clip.proc -text "Use this clipper to process new data" -variable proc_clip 
        checkbutton .l1clip.ymin -variable ymin \
		-command {
		    if {$ymin == 1} {
			set yrange 0
			.l1clip.min.sb configure -state normal
			.l1clip.min.lb configure -state normal
			.l1clip.min.sc configure -state normal
			.l1clip.range.sb configure -state disabled
			.l1clip.range.lb configure -state disabled
			.l1clip.range.sc configure -state disabled
		    }
		    if {$ymin == 0} {
			.l1clip.min.sb configure -state disabled
			.l1clip.min.lb configure -state disabled
			.l1clip.min.sc configure -state disabled
		    }
			
		}
        checkbutton .l1clip.ymax -variable ymax \
		-command {
		    if {$ymax == 1} {
			set yrange 0
			.l1clip.max.sb configure -state normal
			.l1clip.max.lb configure -state normal
			.l1clip.max.sc configure -state normal
			.l1clip.range.sb configure -state disabled
			.l1clip.range.lb configure -state disabled
			.l1clip.range.sc configure -state disabled
		    }
		    if {$ymax == 0} {
			.l1clip.max.sb configure -state disabled
			.l1clip.max.lb configure -state disabled
			.l1clip.max.sc configure -state disabled
		    }
 		}
        checkbutton .l1clip.yrange -variable yrange \
		 -command {
		    if {$yrange == 1} {
			set ymin 0
			set ymax 0
			.l1clip.range.sb configure -state normal
			.l1clip.range.lb configure -state normal
			.l1clip.range.sc configure -state normal
			.l1clip.min.sb configure -state disabled
			.l1clip.min.lb configure -state disabled
			.l1clip.min.sc configure -state disabled
			.l1clip.max.sb configure -state disabled
			.l1clip.max.lb configure -state disabled
			.l1clip.max.sc configure -state disabled
		    }
		    if {$yrange == 0} {
			.l1clip.range.sb configure -state disabled
			.l1clip.range.lb configure -state disabled
			.l1clip.range.sc configure -state disabled
		    }
		 }
        sst .l1clip.max   max_elv   "  Maximum Elevation:"  { -100 1000.0 0.1  }
        sst .l1clip.min   min_elv   "  Minimum Elevation:"  { -100 1000.0 0.1  }
        sst .l1clip.range   range_elv   "  Vertical Range:"  { 0 100.0 0.1  }

	Button .l1clip.1.ok -text "OK" -width 5 -command {
	    
          set ptype [.l1wid.bf4.1.p getvalue]
          set disp_type [.l1wid.bf45.p.5 getvalue]
	  if {$ptype == 0} {
		//for surface topography
	  }
	  if {$ptype == 1} {
		//for bathymetry
	  }
	  if {$ptype == 2} {
		//for vegetation
	  }
	    destroy .l1clip
          }
 
 	Button .l1clip.1.cancel -text "Cancel" -width 5 -command {
	   destroy .l1clip
 	}

 	Button .l1clip.1.dismiss -text "Dismiss" -width 5 -command {
	   destroy .l1clip
 	}

	pack .l1clip.1.ok .l1clip.1.cancel .l1clip.1.dismiss -side left -padx 5
	pack .l1clip.proc .l1clip.ymin .l1clip.min .l1clip.ymax .l1clip.max .l1clip.yrange .l1clip.range .l1clip.1 -side top -pady 5	
  }




frame  .l1wid.bf45.sc.1

## This procedure builds a widget composed of a
## Label, a Spinbox, and a scale so one can enter 
## values by direct entry, the spin clicks, or 
## the scale.
proc sst  { w var lbl rg } {
  frame $w
  SpinBox $w.sb -textvariable $var \
	-range $rg \
	-width 6
  scale $w.sc -showvalue 0 -orient horizontal  \
	-variable $var \
	-from [ lindex $rg 0 ] \
	-to   [ lindex $rg 1 ] \
	-resolution [ lindex $rg 2 ]
  label $w.lb -text $lbl
  pack $w.lb $w.sb $w.sc -side left -fill x -expand 1
  return $w
}

proc ud { a b c } {
global cmax cmin cdelta
  switch $a {
   cmax   { set cdelta [ expr $cmax - $cmin ]; }
   cmin   { set cmax   [ expr $cmin + $cdelta ]; } 
   cdelta { set cmax   [ expr $cmin + $cdelta ]; }
  }
}

trace vdelete cdelta w ud 
trace vdelete cmin w ud 
trace vdelete cmax w ud 

trace variable cdelta w ud
trace variable cmin   w ud
trace variable cmax   w ud

 sst .l1wid.bf45.sc.1.cmax   cmax   "  Cmax:"	  { -50 5000.0 0.1  }
 sst .l1wid.bf45.sc.1.cmin   cmin   "  Cmin:"	  { -100 5000.0 0.1  }
 sst .l1wid.bf45.sc.1.cdelta cdelta "Cdelta:"  { 0.0  2000.0 0.1 }
 pack .l1wid.bf45.sc.1.cmax .l1wid.bf45.sc.1.cdelta .l1wid.bf45.sc.1.cmin -side top


LabelFrame  .l1wid.bf45.sc.f -relief sunken -borderwidth 3 -text "Marker:"
  SpinBox .l1wid.bf45.sc.f.msize \
        -range {0.1 10.0 0.1}  \
        -textvariable msize \
	-helptext "Enter Marker Size (msize)" \
	-width 5

  SpinBox .l1wid.bf45.sc.f.marker \
        -range {0 9 1}  \
        -textvariable markerv \
	-helptext "Enter Marker Type (See help, marker for more details)" \
 	-width 5

LabelFrame .l1wid.bf45.sc.sk -relief groove -borderwidth 3 -text "Skip:"
  SpinBox .l1wid.bf45.sc.sk.skip \
	-range {1 1000 1} \
	-textvariable skip \
	-helptext "Enter plot points to skip" \
	-width 5

 pack  .l1wid.bf45.sc.f.msize .l1wid.bf45.sc.f.marker -side top
 pack .l1wid.bf45.sc.sk.skip 





##### Button .l1wid.bf5.3 -text "Write Ascii Data File" -width 20 


 Button .l1wid.bf4.2.proc -text "Process Now" -width 20 -bd 5\
		-command \
     {
  	   global list lrnindx
           set list {}
           set lrnindx {}
	   exp_send "utm = $utm\n"
	   set ptype [.l1wid.bf4.1.p getvalue]
           set defr [.l1wid.bf4.1.d getvalue]
	   exp_send "ptype = $ptype\n\r"
	   if {$defr == 3} {
	     exp_send "q = gga_win_sel(2, win=6, llarr=\[$mnlon, $mxlon, $mnlat, $mxlat\]);\r"
	   }
          #exp_send "make_bathy, opath=\"$opath\", ofname=\"$ofname\",\
          #    ext_bad_att=$xba, ext_bad_depth=$xbd, latutm = 1, llarr=\[$mnlon,\
          #    $mxlon, $mnlat, $mxlat\];\r"
	 if {$ptype == 0} {
	    exp_send "fs_all = make_fs(latutm=1, q=q, ext_bad_att=1, usecentroid=$usecentroid);\r"
	    expect ">"
	    .l1wid.bf45.p.15 setvalue @0
	 }
	 if {$ptype == 1} {
           exp_send "depth_all = make_bathy(latutm = 1, q = q, ext_bad_depth=1, ext_bad_att=1);\r"
	   expect ">"
	   .l1wid.bf45.p.15 setvalue @1
	 }
	 if {$ptype == 2} {
	    exp_send "veg_all = make_veg(latutm=1, q=q, ext_bad_att=1, ext_bad_veg=1, use_centroid=$usecentroid);\r"
	    expect ">"
	   .l1wid.bf45.p.15 setvalue @2
	 }
	 if {$ptype == 3} {
	    exp_send "cveg_all = make_veg(latutm=1, q=q, use_peak=$usecentroid, multi_peaks=1);\r"
	    expect ">"
	   .l1wid.bf45.p.15 setvalue @3
 	 }
              
    }


#pack  .l1wid.bf2.utm.1 .l1wid.bf2.utm.2 -side left 
#pack .l1wid.bf2.op  .l1wid.bf2.of .l1wid.bf2.utm -side top -pady 8
#pack .l1wid.bf2.utm -side top -pady 8
#pack .l1wid.bf3.lon.but.1 .l1wid.bf3.lon.but.2 -side top -padx 4
#pack .l1wid.bf3.lon.mn .l1wid.bf3.lon.mx -side left -padx 4
#pack .l1wid.bf3.lat1 .l1wid.bf3.lon .l1wid.bf3.lat2 -side top -pady 5
#pack  .l1wid.bf4.1.cb .l1wid.bf4.1.xba .l1wid.bf4.1.xbd .l1wid.bf4.1.xbv -side top -padx 20 -pady 5
#pack  .l1wid.bf4.1 -side top -padx 20 -pady 5
pack .l1wid.bf4.1.d .l1wid.bf4.1.p -side left -padx 5
#pack  .l1wid.bf4.2.cll .l1wid.bf4.2.cen -side left -padx 3
pack  .l1wid.bf4.2.cen .l1wid.bf4.2.proc -side left -padx 10
pack .l1wid.bf4.1 .l1wid.bf4.2 -side top -pady 10
####pack .l1wid.bf5.1  -side right -padx 35 
pack .l1wid.bf1 .l1wid.bf2 .l1wid.bf3 .l1wid.bf4 -side top -expand 1 -fill both
pack .l1wid.bf45.sc.1  -side left  -padx 3
pack .l1wid.bf45.sc.f  .l1wid.bf45.sc.sk -side left -padx 5
pack .l1wid.bf45.q.1 .l1wid.bf45.q.2  .l1wid.bf45.q.3 .l1wid.bf45.q.4 -side left
pack 	.l1wid.bf45.p.fma \
	.l1wid.bf45.p.1 \
	.l1wid.bf45.p.15 \
	.l1wid.bf45.p.5 \
	.l1wid.bf45.p.2 \
	.l1wid.bf45.p.3 \
	-side left -fill x  -padx 2
pack .l1wid.bf45.p .l1wid.bf45.sc .l1wid.bf45.q \
	-side top -fill x -expand 1
pack .l1wid.bf5 .l1wid.bf45  -side top -pady 3 -fill x

proc send_latlon_to_l1pro {minlon maxlon minlat maxlat utm} {
   global mnlon mxlon mnlat mxlat utm
   # .l1widc.utm.1 setvalue @$utm
   set mnlon $minlon
   set mxlon $maxlon
   set mnlat $minlat
   set mxlat $maxlat
}

proc send_bathctl_to_l1pro {blaser bwater bagc bthresh blast} {
   global laser water agc thresh last
   set laser $blaser
   set water $bwater
   set agc   $bagc
   set thresh $bthresh
   set last $blast
}

proc send_rnarr_to_l1pro {bstart bstop brnindx} {
   global start stop list lrnindx
   set start $bstart
   set stop $bstop
   set rnindx $brnindx
   set list1 [concat $start $stop]
   if {[llength $list] == 0} {
    set list $list1 
    set lrnindx $rnindx
   } else {
    set list [concat $list $list1 ]
    set lrnindx [concat $lrnindx $rnindx]
   }
}


proc plot_fltlines {sel} {
  
 global l1pro_fma win_no cmin cmax cdelta msize markerv varlist skip plot_dpi
     #fill in later using what to plot
     set fs 0
     set ba 0
     set de 0
     set lelv 0
     set fint 0
     set lint 0
     set cht 0
     set disp_type [.l1wid.bf45.p.5 getvalue]
     set var_no [.l1wid.bf45.p.15 getvalue]
     set var_type [lindex $varlist $var_no]
     if {$disp_type == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of data to display!" \
        -type ok
     }
     if {$disp_type == 0} { set fs  1}
     if {$disp_type == 1} { set ba  1}
     if {$disp_type == 2} { set de  1}
     if {$disp_type == 3} { set lelv  1}
     if {$disp_type == 4} { set fint 1}
     if {$disp_type == 5} { set lint 1}
     if {$disp_type == 6} { set cht 1}
     set ptype [.l1wid.bf4.1.p getvalue]
     if {$ptype == -1} {
       	tk_messageBox  -icon warning \
        -message "You need to specify the type of processed data i.e. topo, bathy or veg!" \
        -type ok
     } else {
         if { $l1pro_fma } {
           
           switch  $plot_dpi  {
  	   "75" {
	      exp_send "winkill, $win_no; window,$win_no,dpi=$plot_dpi,width=450, height=450, style=\"work.gs\"; fma;limits, square=1;\r";
	    }
  	   "100" {
	      exp_send "winkill, $win_no; window,$win_no,dpi=$plot_dpi,width=600, height=600, style=\"work.gs\"; fma; limits, square=1;\r";
	    }
	   "1100" {
	      exp_send "winkill, $win_no; window, $win_no, dpi=100, width=1100, height=850, style=\"landscape11x85.gs\";fma; limits, square=1;\r";
	    }
           }
	 }
     }

     set cmax [ expr $cmin + $cdelta ]
     if {$ptype == 0} {
       set cmax1 [expr $cmax*100.]
       set cmin1 [expr $cmin*100.]
       if {$disp_type == 0} {
         if {$sel == 0} {
           exp_send "display, $var_type, win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv, edt=1;\r"
         } else {
           exp_send "display, fs_some, win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv, edt=1;\r"
         }
         expect ">"
       } elseif { $disp_type == 4 } {
         if {$sel == 0} {
           exp_send "display, $var_type, mode=\"intensity\", win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv;\r"
         } else {
           exp_send "display, fs_some, mode=\"intensity\", win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv;\r"
         }
         expect ">"
       }
     }
     if {$ptype == 1} {
       if {$sel == 0} {
         exp_send "plot_bathy, $var_type, win=$win_no, ba=$ba, fs = $fs, de = $de , fint = $fint, lint = $lint, cmin=$cmin, cmax=$cmax, msize = $msize, marker=$markerv, skip=$skip; \r"
       } else {
         exp_send "plot_bathy, depth_some, win=$win_no, ba=$ba, fs = $fs, de = $de , fint = $fint, lint = $lint, cmin=$cmin, cmax=$cmax, msize = $msize, marker=$markerv, skip=$skip; \r"
       }
       expect ">"
     }
     if {$ptype == 2} {
        if {$sel == 0} {
         exp_send "display_veg, $var_type, win=$win_no, cmin=$cmin, cmax = $cmax, size = $msize, edt=1, felv = $fs, lelv=$lelv, fint=$fint, lint=$lint, cht = $cht, marker=$markerv, skip=$skip;\r"
        } else {
         exp_send "display_veg, veg_some, win=$win_no, cmin=$cmin, cmax = $cmax, size = $msize, edt=1, felv = $fs, lelv=$lelv, fint=$fint, lint=$lint, cht = $cht, marker=$markerv, skip=$skip;\r"
        }
         expect ">"
     }
     if {$ptype == 3} {
       set cmax1 [expr $cmax*100.]
       set cmin1 [expr $cmin*100.]
       if {$disp_type == 0} {
         if {$sel == 0} {
           exp_send "display, $var_type, win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv, edt=1, skip=$skip;\r"
         } else {
           exp_send "display, cveg_some, win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv, edt=1, skip=$skip;\r"
         }
         expect ">"
       } elseif { $disp_type == 4 } {
         if {$sel == 0} {
           exp_send "display, $var_type, mode=\"intensity\", win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv, skip=$skip;\r"
         } else {
           exp_send "display, cveg_some, mode=\"intensity\", win=$win_no, cmin=$cmin1, cmax = $cmax1, size = $msize, marker=$markerv, skip=$skip;\r"
         }
         expect ">"
       }
     }
}

