# vim: set ts=4 sts=4 sw=4 ai sr et:

package require struct::set
package require fileutil
package require misc

if {[catch [list package require json]]} {
    puts "No JSON"
    return
}

source [file join $src_path gui_procs.ytk]

### INITIALIZATION

if {![info exists __mission_conf]} {
    set __mission_conf [dict create]
}
if {![info exists __mission_day]} {
    set __mission_day ""
}

if {![info exists __mission_path]} {
    set __mission_path ""
}

# __mission_cache -- not needed

if {![info exists __mission_settings]} {
    set __mission_settings [dict create \
        "relative paths" [list "data_path" "edb file" "pnav file" \
            "ins file" "ops_conf file" "bath_ctl file" \
            "cir dir" "rgb dir" "rgb file"] \
    ]
}

ybkg h_set __mission_settings \"ytk\" 1

### COMMON WITH YORICK

# The procedures in this file are largely identical to those in mission_conf.i.
# Please refer to mission_conf.i for documentation on any procedure without
# documentation here.

proc mission_clear {{sync 1}} {
    global __mission_conf
    set __mission_conf [dict create]
    if {$sync} {
        exp_send "mission_clear, sync=0\r"
    }
}

proc mission_get {key {day -}} {
    global __mission_conf __mission_day __mission_settings __mission_path
    default day $__mission_day
    if {[mission_has $key $day]} {
        set result [dict get $__mission_conf $day $key]
        set rel_paths [dict get $__mission_settings "relative paths"]
        if {[::struct::set contains $rel_paths $key]} {
            set result [file join $__mission_path $result]
        }
        return $result
    } else {
        return
    }
}

proc mission_set {key value {day -} {sync 1}} {
    global __mission_conf __mission_day __mission_settings __mission_path
    default day $__mission_day
    if {![string length $day]} {
        error "Please provide a day or set __mission_day."
    }
    if {$sync} {
        ybkg mission_set_bg \"$key\" \"$value\" \"$day\"
    }
    set rel_paths [dict get $__mission_settings "relative paths"]
    if {[::struct::set contains $rel_paths $key]} {
        set value [::fileutil::relative $__mission_path $value]
    }
    dict set __mission_conf $day $key $value
}

proc mission_has {key {day -}} {
    global __mission_conf __mission_day
    default day $__mission_day
    return [dict exists $__mission_conf $day $key]
}

proc missionday_current {{day NODAYPROVIDED} {sync 1}} {
    global __mission_day
    if {$day ne "NODAYPROVIDED"} {
        set __mission_day $day
        if {$sync} {
            exp_send "missionday_current, \"$day\", sync=0;\r"
        }
    }
    return $__mission_day
}

proc missionday_list {} {
    global __mission_conf
    set days [list]
    return [lsort [dict keys $__mission_conf]]
}

proc mission_delete {key {day -} {sync 1}} {
    global __mission_conf __mission_day
    default day $__mission_day
    if {![string length $day]} {
        error "Please provide a day or set __mission_day."
    }
    dict unset __mission_conf $day $key
    if {$sync} {
        exp_send "mission_delete, \"$key\", day=\"$day\", sync=0;\r"
    }
}

proc missionday_add {day {sync 1}} {
    global __mission_conf
    dict set __mission_conf $day [dict create]
    if {$sync} {
        exp_send "missionday_add, \"$day\", sync=0;\r"
    }
}

proc missionday_delete {day {sync 1}} {
    global __mission_conf
    dict unset __mission_conf $day
    if {$sync} {
        ybkg missionday_delete_bg \"$day\"
    }
}

proc missionday_exists {{day -}} {
    global __mission_conf __mission_day
    default day $__mission_day
    if {![string length $day]} {
        error "Please provide a day or set __mission_day."
    }
    return [dict exists $__mission_conf $day]
}

proc missionday_set {hash {day -} {sync 1}} {
    global __mission_conf __mission_day
    default day $__mission_day
    if {![string length $day]} {
        error "Please provide a day or set __mission_day."
    }
    missionday_delete $day $sync
    dict for {key val} $hash {
        mission_set $key $val $day $sync
    }
}

proc missionday_get {{day -}} {
    global __mission_conf __mission_day
    default day $__mission_day
    if {![string length $day]} {
        error "Please provide a day or set __mission_day."
    }
    if {[missionday_exists $day]} {
        return [dict get $__mission_conf $day]
    } else {
        return
    }
}

proc __json_key_str {key val} {
    set val [json_stringify $val]
    return [__json_key_val $key "\"$val\""]
}

proc __json_key_val {key val} {
    set key [json_stringify $key]
    return "\"$key\": $val"
}

proc mission_json_export {} {
    global __mission_conf

    set json_list [list]

    # Build up __mission_conf's data
    set conf_list [list]
    dict for {day day_data} $__mission_conf {
        set day_list [list]
        dict for {key value} $day_data {
            lappend day_list "      [__json_key_str $key $value]"
        }
        set day_val [join $day_list ",\n"]
        set day_val "{\n$day_val\n    }"
        lappend conf_list "    [__json_key_val $day $day_val]"
    }
    set conf_val [join $conf_list ",\n"]
    set conf_val "{\n$conf_val\n  }"
    lappend json_list "  [__json_key_val days $conf_val]"

    set json_out [join $json_list ",\n"]
    set json_out "{\n$json_out\n}\n"
    
    return $json_out
}

proc mission_json_import {json {sync 1}} {
    global __mission_conf
    set data [::json::json2dict $json]
    if {[dict exists $data days]} {
        set __mission_conf [dict get $data days]
    } else {
        set __mission_conf $data
    }
    if {$sync} {
        mission_send
    }
}

proc mission_save {filename} {
    exp_send "mission_save, \"$filename\";\r"
}

proc mission_load {filename} {
    exp_send "mission_load, \"$filename\";\r"
}

proc mission_send {} {
    global __mission_day
    ybkg mission_json_import_bg \"[mission_json_export]\"
    ybkg funcset __mission_day \"$__mission_day\"
}

proc mission_receive {} {
    exp_send "mission_send;\r"
}

proc missiondata_cache {action} {
    exp_send "missiondata_cache, \"$action\";\r"
}

# missiondata_wrap
# missiondata_unwrap

proc missiondata_load {type {day -}} {
    global __mission_day
    default day $__mission_day
    exp_send "missiondata_load, \"$type\", day=\"$day\";\r"
}

proc missiondata_read {filename} {
    exp_send "missiondata_read, \"$filename\";\r"
}

proc missiondata_write {filename type {overwrite 1}} {
    exp_send "missiondata_write, \"$filename\", \"$type\", overwrite=$overwrite;\r"
}

proc mission_path {{path NOPATHPROVIDED} {sync 1}} {
    global __mission_path
    if {$path ne "NOPATHPROVIDED"} {
        set __mission_path $path
        if {$sync} {
            exp_send "mission_path, \"$path\", sync=0;\r"
        }
    }
    return $__mission_path
}

proc mission_initialize_from_path {mission_path {strict 1}} {
    set cmd "mission_initialize_from_path, \"$mission_path\""
    if {! $strict} {
        append cmd ", strict=0"
    }
    exp_send "$cmd\r"
}

### UTILITY

proc json_stringify {raw_val} {
# json_stringify raw_val
# Sanitizes a string using JSON conventions.
    return [string map [list \
        \\  \\\\    \
        \"  \\\"    \
        /   \\/     \
        \n  \\n     \
        \b  \\b     \
        \f  \\f     \
        \r  \\r     \
        \t  \\t     \
    ] $raw_val]
}

### GUI CODE

namespace eval mission {
    namespace eval v {
        variable toplevel .mission_conf
        variable dateframe ""
        variable kmlmenu ""
        variable filetypes [list \
            [list JSON .json] \
            [list "All files" *] \
        ]
        variable currentfile ""
        variable config_temp
    }

    proc launch_gui {} {
        if {[winfo exists $v::toplevel]} {
            wm deiconify $v::toplevel
            register_traces
        } else {
            create_gui
        }
    }
    
    proc create_gui {} {
        set win $v::toplevel
        destroy $win

        toplevel $win
        wm resizable $win 0 0
        wm title $win "Mission Configuration"

        set mb $win.mb
        menu $mb
        $win configure -menu $mb

        set ns [namespace current]

        menu $mb.file
        $mb add cascade -label File -underline 0 -menu $mb.file

        $mb.file add command -label "New" -command ${ns}::menu_new -underline 0
        $mb.file add command -label "Open" -command ${ns}::menu_open -underline 0
        $mb.file add command -label "Save" -command ${ns}::menu_save -underline 0
        $mb.file add command -label "Save As" -command ${ns}::menu_save_as \
            -underline 5
        $mb.file add separator
        $mb.file add command -label "Close" -command ${ns}::menu_close -underline 0

        menu $mb.act
        $mb add cascade -label Actions -underline 0 -menu $mb.act

        menu $mb.act.init
        $mb.act add cascade -label "Initialize from mission directory" \
            -underline 0 -menu $mb.act.init
        $mb.act.init add command -label "Strict (days with lidar)" \
            -underline 0 \
            -command [list ${ns}::menu_initialize_from_mission_dir 1]
        $mb.act.init add command -label "Non-strict (all days)" \
            -underline 0 \
            -command [list ${ns}::menu_initialize_from_mission_dir 0]

        $mb.act add separator
        $mb.act add command -label "Launch RGB" -command ${ns}::menu_launch_rgb
        $mb.act add command -label "Launch CIR" -command ${ns}::menu_launch_cir
        $mb.act add command -label "Dump CIR" -command ${ns}::menu_dump_cir
        $mb.act add separator
        menu $mb.act.kml
        set v::kmlmenu $mb.act.kml
        $mb.act add cascade -label "Generate KMZ" -menu $mb.act.kml
        $mb.act.kml add command -label "Full mission" \
            -command ${ns}::menu_gen_kmz
        $mb.act add command -label "Show EDB summary" \
            -command ${ns}::menu_edb_summary

        menu $mb.cache
        $mb add cascade -label Cache -underline 0 -menu $mb.cache
        $mb.cache add command -label "Enable cache" \
            -command {exp_send "missiondata_cache, \"enable\";\r"}
        $mb.cache add command -label "Disable cache" \
            -command {exp_send "missiondata_cache, \"disable\";\r"}
        $mb.cache add command -label "Preload cache" \
            -command {exp_send "missiondata_cache, \"preload\";\r"}
        $mb.cache add command -label "Clear cache" \
            -command {exp_send "missiondata_cache, \"clear\";\r"}

        set f $win.fraDates
        set v::dateframe $f
        frame $f

        pack $f -expand 1 -fill x

        button $win.btnAdd -text "Add new mission day..." \
            -padx 2m -pady 1m \
            -command ${ns}::date_add
        pack $win.btnAdd -anchor w

        button $win.btnPath -text "Specify mission path..." \
            -padx 2m -pady 1m \
            -command ${ns}::set_mission_path
        pack $win.btnPath -anchor w

        button $win.btnRgb -text "All RGB" \
            -padx 2m -pady 1m \
            -command ${ns}::menu_launch_rgb
        pack $win.btnRgb -anchor w

        button $win.btnCir -text "All Cir" \
            -padx 2m -pady 1m \
            -command ${ns}::menu_launch_cir
        pack $win.btnCir -anchor w

        wm protocol $win WM_DELETE_WINDOW ${ns}::menu_close

        register_traces

        update_gui
    }

    proc register_traces {} {
        global __mission_conf
        trace add variable __mission_conf {write unset} [namespace code update_gui]
    }

    proc unregister_traces {} {
        trace remove variable __mission_conf {write unset} [namespace code update_gui]
    }

    proc menu_new {} {
        mission_clear
    }

    proc menu_open {} {
        global _ytk
        set filename [tk_getOpenFile \
            -initialdir $_ytk(initialdir) \
            -parent $v::toplevel \
            -title "Select the mission configuration file to load" \
            -filetypes $v::filetypes]
        if {$filename ne ""} {
            mission_load $filename
            set v::currentfile $filename
        }
    }

    proc menu_save {} {
        if {$v::currentfile ne ""} {
            mission_save $v::currentfile
        } else {
            menu_save_as
        }
    }

    proc menu_save_as {} {
        set filename [tk_getSaveFile \
            -initialdir [mission_path] \
            -parent $v::toplevel \
            -title "Enter the filename for the mission configuration file" \
            -filetypes $v::filetypes]
        if {$filename ne ""} {
            set v::currentfile $filename
            menu_save
        }
    }

    proc menu_close {} {
        unregister_traces
        wm withdraw $v::toplevel
    }

    proc menu_initialize_from_mission_dir strict {
        set dir [tk_chooseDirectory \
            -parent $v::toplevel \
            -title "Select the mission directory" \
            -mustexist 1]
        if {$dir ne ""} {
            mission_initialize_from_path $dir $strict
            update_gui
        }
    }

    proc menu_launch_rgb {} {
        set rgb_p [list]
        set rgb_t [list]
        foreach day [missionday_list] {
            if {[mission_has "rgb dir" $day]} {
                lappend rgb_p [mission_get "rgb dir" $day]
            }
            if {[mission_has "rgb file" $day]} {
                lappend rgb_t [mission_get "rgb file" $day]
            }
        }
        if {[llength $rgb_p]} {
            set rgb [sf::controller %AUTO%]
            $rgb load rgb::f2006::tarpaths -paths $rgb_p
            ybkg set_sf_bookmarks \"$rgb\"
        } elseif {[llength $rgb_t]} {
            set rgb [sf::controller %AUTO%]
            $rgb load rgb::f2001::tarfiles -files $rgb_t
            ybkg set_sf_bookmarks \"$rgb\"
        }
    }

    proc menu_launch_cir {} {
        set paths [list]
        foreach day [missionday_list] {
            if {[mission_has "cir dir" $day]} {
                lappend paths [mission_get "cir dir" $day]
            }
        }
        if {[llength $paths]} {
            set cir [sf::controller %AUTO%]
            $cir load cir::f2004::tarpaths -paths $paths
            ybkg set_sf_bookmarks \"$cir\"
        }
    }

    proc menu_dump_cir {} {
        set outdir [tk_chooseDirectory \
            -title "Select destination for CIR imagery" \
            -initialdir [mission_path]]
        if {$outdir ne ""} {
            ::sf::tools::dump_mission_cir $outdir
        }
    }

    proc menu_gen_kmz {{date {}}} {
        set response [tk_messageBox -type yesno \
            -icon question -title "Generate KMZ files?" \
            -message "Would you like to generate KMZ files for the current\
                mission configuration? Your KMZ files will be placed in a 'kml'\
                subdirectory of the mission."]
        if {$response eq "yes"} {
            if {$date eq ""} {
                exp_send "kml_mission;\r"
            } else {
                date_load $date
                set kml [file join [mission_path] kml ${date}.kmz]
                exp_send "kml_pnav, pnav, \"$kml\", edb=edb,\
                    soe_day_start=soe_day_start, ins_header=iex_head;\r"
            }
        }
    }

    proc menu_edb_summary {} {
        exp_send "mission_edb_summary\r"
    }

    proc update_gui {args} {
        set f $v::dateframe
        set mb $v::kmlmenu
        foreach w [winfo children $f] {
            destroy $w
        }
        if {[$mb index end] > 0} {
            $mb delete 1 end
        }
        set ns [namespace current]
        foreach date [missionday_list] {
            label $f.lbl$date -text $date
            button $f.btnConfig$date -text Configure \
                -padx 2m -pady 1m \
                -command [list ${ns}::date_config $date]
            button $f.btnLoad$date -text Load \
                -padx 2m -pady 1m \
                -command [list ${ns}::date_load $date]
            button $f.btnRgb$date -text RGB \
                -padx 2m -pady 1m \
                -command [list ${ns}::date_rgb $date]
            button $f.btnCir$date -text Cir \
                -padx 2m -pady 1m \
                -command [list ${ns}::date_cir $date]
            button $f.btnDelete$date -text X \
                -padx 2m -pady 1m \
                -command [list ${ns}::date_delete $date]
            grid $f.lbl$date $f.btnConfig$date $f.btnLoad$date \
                $f.btnRgb$date $f.btnCir$date $f.btnDelete$date
            grid $f.lbl$date -sticky w

            $mb add command -label $date -command [list ${ns}::menu_gen_kmz $date]
        }
    }

    proc __date_config_path_helper {w var dlg} {
        foreach child [list Edb Pnav Ins Ops Cir RgbDir RgbTar] {
            $w.ent$child configure -initialdir [set [set var]([list $dlg data_path])]
        }
    }

    proc date_config {date} {
        set dlg [iwidgets::dialog $v::toplevel.#auto \
            -title "Mission day: $date" \
            -modality application]
        $dlg hide Help
        $dlg hide Apply

        set ns [namespace current]
        set c [list list $dlg]

        $dlg buttonconfigure OK -command [list $dlg deactivate 1]
        $dlg buttonconfigure Cancel -command [list $dlg deactivate 0]

        set v::config_temp([{*}$c date]) [mission_get date $date]
        set v::config_temp([{*}$c data_path]) [mission_get data_path $date]
        set v::config_temp([{*}$c "edb file"]) [mission_get "edb file" $date]
        set v::config_temp([{*}$c "pnav file"]) [mission_get "pnav file" $date]
        set v::config_temp([{*}$c "ins file"]) [mission_get "ins file" $date]
        set v::config_temp([{*}$c "ops_conf file"]) [mission_get "ops_conf file" $date]
        set v::config_temp([{*}$c "bath_ctl file"]) [mission_get "bath_ctl file" $date]
        set v::config_temp([{*}$c "cir dir"]) [mission_get "cir dir" $date]
        set v::config_temp([{*}$c "rgb dir"]) [mission_get "rgb dir" $date]
        set v::config_temp([{*}$c "rgb file"]) [mission_get "rgb file" $date]

        set w [$dlg childsite]

        iwidgets::Entryfield $w.entDate \
            -labeltext "Date:" \
            -textvariable ${ns}::v::config_temp([{*}$c date])

        GUI::FileEntryButton $w.entPath \
            -labeltext "Data path:" \
            -actiontype dir \
            -parent $dlg \
            -initialdir [mission_path] \
            -updatecommand [list ${ns}::__date_config_path_helper $w ${ns}::v::config_temp $dlg] \
            -textvariable ${ns}::v::config_temp([{*}$c data_path])
        GUI::FileEntryButton $w.entEdb \
            -labeltext "EDB file:" \
            -actiontype open \
            -filetypes {
                {{EAARL Database Index files} {.idx}}
                {{All files} *}
            } \
            -parent $dlg \
            -textvariable ${ns}::v::config_temp([{*}$c "edb file"])
        GUI::FileEntryButton $w.entPnav \
            -labeltext "PNAV file:" \
            -actiontype open \
            -filetypes {
                {{PNAV files} {.ybin}}
                {{All files} *}
            } \
            -parent $dlg \
            -textvariable ${ns}::v::config_temp([{*}$c "pnav file"])
        GUI::FileEntryButton $w.entIns \
            -labeltext "INS file:" \
            -actiontype open \
            -filetypes {
                {{pbd files} {.pbd}}
                {{TANS files} {.ybin}}
                {{All files} *}
            } \
            -parent $dlg \
            -textvariable ${ns}::v::config_temp([{*}$c "ins file"])
        GUI::FileEntryButton $w.entOps \
            -labeltext "ops_conf.i file:" \
            -actiontype open \
            -filetypes {
                {{Yorick files} {.i}}
                {{All files} *}
            } \
            -parent $dlg \
            -textvariable ${ns}::v::config_temp([{*}$c "ops_conf file"])
        GUI::FileEntryButton $w.entBath \
            -labeltext "bathy settings file:" \
            -actiontype open \
            -filetypes {
                {{Bathy settings files} {.bctl}}
                {{All files} *}
            } \
            -parent $dlg \
            -textvariable ${ns}::v::config_temp([{*}$c "bath_ctl file"])
        GUI::FileEntryButton $w.entCir \
            -labeltext "CIR path:" \
            -actiontype dir \
            -parent $dlg \
            -textvariable ${ns}::v::config_temp([{*}$c "cir dir"])
        GUI::FileEntryButton $w.entRgbDir \
            -labeltext "RGB path (newer datasets):" \
            -actiontype dir \
            -parent $dlg \
            -textvariable ${ns}::v::config_temp([{*}$c "rgb dir"])
        GUI::FileEntryButton $w.entRgbTar \
            -labeltext "RGB tar file (older datasets):" \
            -actiontype open \
            -filetypes {
                {{tar files} {.tar}}
                {{All files} *}
            } \
            -parent $dlg \
            -textvariable ${ns}::v::config_temp([{*}$c "rgb file"])

        __date_config_path_helper $w ${ns}::v::config_temp $dlg

        foreach ent [list Date Path Edb Pnav Ins Ops Cir RgbDir RgbTar] {
            [$w.ent$ent component entry] configure \
                -width 60
        }

        iwidgets::Labeledwidget::alignlabels \
            $w.entDate \
            $w.entPath $w.entEdb $w.entPnav $w.entIns $w.entOps \
            $w.entBath $w.entCir $w.entRgbDir $w.entRgbTar

        pack \
            $w.entDate \
            $w.entPath $w.entEdb $w.entPnav $w.entIns $w.entOps \
            $w.entBath $w.entCir $w.entRgbDir $w.entRgbTar \
            -side top -pady 5 -padx 10 -fill x -expand yes

        set prompt_user 1
        while {$prompt_user} {
            set missing_needed 0
            set prompt_user 0
            if {[$dlg activate]} {
                set temp_data [dict create]
                set keys [list date data_path "edb file" "pnav file" \
                    "ins file" "ops_conf file" "bath_ctl file" "cir dir" \
                    "rgb dir" "rgb file"]
                foreach key $keys {
                    if {[string length $v::config_temp([{*}$c $key])]} {
                        dict set temp_data $key $v::config_temp([{*}$c $key])
                    }
                }
                if {[llength [dict keys $temp_data]]} {
                    if {
                        [dict exists $temp_data data_path] &&
                        [dict exists $temp_data "edb file"]
                    } {
                        missionday_set $temp_data $date
                    } else {
                        set missing_needed 1
                    }
                } else {
                    set missing_needed 1
                }
            }
            if {$missing_needed} {
                set response [tk_messageBox \
                    -icon warning -parent $dlg -type yesno \
                    -message "A mission day must have a data path and EAARL\
                        edb file at a minimum. Do you want to return to the\
                        form to enter this information? (Answering 'No'\
                        will abort changes to the entry entirely.)"]
                switch -- $response {
                    yes {set prompt_user 1}
                    no  {set prompt_user 0}
                }
            }
        }

        destroy $dlg
    }

    proc date_delete {date} {
        missionday_delete $date
        update_gui
    }

    proc date_load {date} {
        missionday_current $date
        missiondata_load all
    }

    proc date_rgb {day} {
        if {[mission_has "rgb dir" $day]} {
            set rgb [sf::controller %AUTO%]
            $rgb load rgb::f2006::tarpath -path [mission_get "rgb dir" $day]
            ybkg set_sf_bookmark \"$rgb\" \"$day\"
        } elseif {[mission_has "rgb file" $day]} {
            set rgb [sf::controller %AUTO%]
            $rgb load rgb::f2001::tarfiles -files [list [mission_get "rgb file" $day]]
            ybkg set_sf_bookmark \"$rgb\" \"$day\"
        }
    }

    proc date_cir {day} {
        if {[mission_has "cir dir" $day]} {
            set cir [sf::controller %AUTO%]
            $cir load cir::f2004::tarpath -path [mission_get "cir dir" $day]
            ybkg set_sf_bookmark \"$cir\" \"$day\"
        }
    }

    proc date_add {} {
        set dlg [iwidgets::promptdialog $v::toplevel.#auto \
            -modality application \
            -title "Add new mission day" \
            -labeltext "Please enter a name for the mission day (such as YYYY-MM-DD):"]
        $dlg hide Help
        $dlg hide Apply
        focus [$dlg component prompt component entry]
        $dlg center
        if {[$dlg activate]} {
            set date [$dlg get]
            if {[missionday_exists $date]} {
                tk_messageBox \
                    -icon warning -parent $dlg -type ok \
                    -message "That mission day already exists. If you want to\
                        modify, please use the mission day's configure\
                        button."
            } else {
                after idle [list after 0 [namespace code [list date_config $date]]]
            }
        }
        destroy $dlg
    }

    proc set_mission_path {} {
        set continue yes
        if {[llength [missionday_list]] > 0} {
            set continue [tk_messageBox \
                -icon warning -parent $dlg -type yesno \
                -message "Changing the mission path will clear all currently\
                    defined mission days. Are you sure you want to continue?"]
        }
        if {$continue eq "yes"} {
            set dlg [iwidgets::fileselectiondialog $v::toplevel.#auto \
                -title "Specify mission path" \
                -modality application \
                -fileson 0]

            #$dlg hide 1 ;# Filter
            #$dlg default 0
            #$dlg center
            if {[$dlg activate]} {
                set path [$dlg get]
                if {[file isdirectory $path]} {
                    if {$path eq [mission_path]} {
                        tk_messageBox \
                            -icon warning -parent $dlg -type ok \
                            -message "The path you selected is identical to the\
                                path already in use. No change made."
                    } else {
                        mission_clear
                        mission_path $path
                    }
                } else {
                    tk_messageBox \
                        -icon warning -parent $dlg -type ok \
                        -message "The directory you entered does not exist;\
                            aborting."
                }
            }
        }
    }
}
