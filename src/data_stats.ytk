# vim: set tabstop=3 softtabstop=3 shiftwidth=3 autoindent shiftround expandtab:

package require Iwidgets
package require Itcl
package require misc

option add *DataStatsWindow.title "Data Statistics" widgetDefault

if {[info commands DataStatsWindow] eq ""} {
   itcl::class DataStatsWindow {
      inherit iwidgets::Shell

      constructor {data args} {}
      destructor {}

      # All options should be treated as read-only after creation
      # Variable containing list of valid windows
      itk_option define -maxwin maxWin MaxWin 64

      method update_highlight {} {}
      method get_stats {} {}
      method set_stats {var json} {}
      method refresh_fields {} {}
      method plot_segment {idx} {}
      method query {} {}

      variable _segment
      variable _statistic
      variable _stat_mapping [dict create \
         PDOP        pdop \
         Altitude    alt \
         Roll        roll \
         Pitch       pitch \
         Heading     heading \
         Elevation   elevation \
         Bathymetry  bathy \
         Satellites  sv \
         "GPS RMS"   xrms \
         Velocity    velocity \
      ]
      variable _stat_data [list]
      variable _count
   }
}

itcl::body DataStatsWindow::constructor {data args} {
   wm protocol $itk_component(hull) WM_DELETE_WINDOW \
      [itcl::code itcl::delete object $this]
   eval itk_initialize $args

   set data [::json::json2dict $data]
   foreach key [lsort -dictionary [dict keys $data]] {
      lappend _stat_data $key
      lappend _stat_data [dict get $data $key]
   }

   #wm resizable $itk_component(hull) 1 0
   #wm minsize $itk_component(hull) 460 100

   set w $itk_interior

   set f $w.fraHead
   ttk::frame $f
   ::mixin::combobox $f.cboStatistic \
      -textvariable [itcl::scope _statistic] \
      -state readonly \
      -modifycmd [itcl::code $this refresh_fields] \
      -values [lsort [dict keys $_stat_mapping]]

   grid $f.cboStatistic -column 1
   grid columnconfigure $f {0 2} -weight 1

   set f $w.fraVariables

   ttk::labelframe $f -text "Statistics"

   foreach field [list Variable Min Q1 Median Q3 Max Mean RMS] {
      ttk::label $f.lblHeading$field -text $field -justify center -anchor center
      bind $f.lblHeading$field <Enter> [itcl::code $this update_highlight]
      bind $f.lblHeading$field <Leave> [itcl::code $this update_highlight]
      bind $f.lblHeading$field <Motion> [itcl::code $this update_highlight]
   }
   ttk::label $f.lblHeadingPlot -text "Plot Segment" -justify center -anchor center

   grid $f.lblHeadingPlot - $f.lblHeadingVariable \
      $f.lblHeadingMin $f.lblHeadingQ1 $f.lblHeadingMedian \
      $f.lblHeadingQ3 $f.lblHeadingMax \
      $f.lblHeadingMean $f.lblHeadingRMS \
      -sticky ew

   grid columnconfigure $f {3 4 5 6 7 8 9} -uniform cols

   set _count [expr {[llength $_stat_data]/2}]
   set idx 0
   foreach {segment -} $_stat_data {
      incr idx

      set _segment($idx,win) 10
      set _segment($idx,var) $segment
      set _segment($idx,min) "..."
      set _segment($idx,q1) "..."
      set _segment($idx,med) "..."
      set _segment($idx,q3) "..."
      set _segment($idx,max) "..."
      set _segment($idx,avg) "..."
      set _segment($idx,rms) "..."

      button $f.btnPlot$idx -text "Plot in:" \
         -command [itcl::code $this plot_segment $idx]

      spinbox $f.spnWin$idx \
         -textvariable [itcl::scope _segment($idx,win)] \
         -from 0 -to $itk_option(-maxwin) -width 2

      foreach field [list var min q1 med q3 max avg rms] {
         ttk::label $f.lbl$field$idx -justify center -anchor center \
            -textvariable [itcl::scope _segment($idx,$field)]
         bind $f.lbl$field$idx <Enter> [itcl::code $this update_highlight]
         bind $f.lbl$field$idx <Leave> [itcl::code $this update_highlight]
         bind $f.lbl$field$idx <Motion> [itcl::code $this update_highlight]
      }

      grid $f.btnPlot$idx $f.spnWin$idx $f.lblvar$idx \
         $f.lblmin$idx $f.lblq1$idx $f.lblmed$idx $f.lblq3$idx $f.lblmax$idx \
         $f.lblavg$idx $f.lblrms$idx \
         -sticky ewns
   }
   bind $f <Enter> [itcl::code $this update_highlight]
   bind $f <Leave> [itcl::code $this update_highlight]
   bind $f <Motion> [itcl::code $this update_highlight]

   unset idx
   grid columnconfigure $f 1 -weight 1

   grid $w.fraHead -sticky wens
   grid $w.fraVariables -sticky wens
   grid columnconfigure $w 0 -weight 1

   bind $w <Enter> [itcl::code $this update_highlight]
   bind $w <Leave> [itcl::code $this update_highlight]
   bind $w <Motion> [itcl::code $this update_highlight]
}

itcl::body DataStatsWindow::update_highlight {} {
   set hover [eval winfo containing [winfo pointerxy $itk_interior]]
   if {[string match $itk_interior.fraVariables.* $hover]} {
      set cnf [grid info $hover]
      set r [dict get $cnf -row]
      set c [dict get $cnf -column]
      if {$c < 2} {
         set r -1
         set c -1
      } elseif {$c == 2} {
         set c -1
      }
      if {$r == 0} {
         set r -1
      }
   } else {
      set r -1
      set c -1
   }
   foreach widget [grid slaves $itk_interior.fraVariables] {
      if {[winfo class $widget] eq "TLabel"} {
         set cnf [grid info $widget]
         set wr [dict get $cnf -row]
         set wc [dict get $cnf -column]
         if {$r == $wr || $c == $wc} {
            $widget state active
         } else {
            $widget state !active
         }
      }
   }
}

itcl::body DataStatsWindow::query {} {
   return $_stat_data
}

itcl::body DataStatsWindow::refresh_fields {} {
   set statistic [dict get $_stat_mapping $_statistic]
   if {$statistic eq ""} {
      return
   }
   for {set i 1} {$i <= $_count} {incr i} {
      set var $_segment($i,var)
      foreach field [list min q1 med q3 max avg rms] {
         if {[dict exists $_stat_data $var $statistic]} {
            set _segment($i,$field) \
               [format "%.2f" [dict get $_stat_data $var $statistic $field]]
         } else {
            set _segment($i,$field) -
         }
      }
      if {$statistic eq "heading"} {
         $itk_interior.fraVariables.btnPlot$i configure -state disabled
      } else {
         $itk_interior.fraVariables.btnPlot$i configure -state normal
      }
   }
}

itcl::body DataStatsWindow::plot_segment {idx} {
   set var $_segment($idx,var)
   set win $_segment($idx,win)
   set type [dict get $_stat_mapping $_statistic]
   ycmd tk_dsw_plot_stats \
      [list [ystr $var] $var [ystr $type] $win]
}

proc launch_datastats_stats {data args} {
   set dsw [eval \
      [list DataStatsWindow .#auto $data \
         -maxwin 64] \
      $args]
   $dsw activate
}

proc launch_datastatswindow {variables args} {
   exp_send "tk_dsw_launch_stats, \"$variables\";\r"
   expect "> "
}

proc segment_stat_launcher {method {yvar -}} {
   if {$yvar eq "-"} {
      set yvar $::pro_var
   }
   set valid [list fltlines fltlines_digitizer days days_digitizer]
   if {[lsearch $valid $method] == -1} {
      error "Invalid method for segment_stat_launcher: $method"
   }
   exp_send "tk_dsw_launch_$method, \"$yvar\";\r"
   expect "> "
}
