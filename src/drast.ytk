##AN: added global variable thetime sent from sf_a.tcl
global rn tid blist depth_display_units total_edb_records thetime

set play_flag 0
set play_dir fwd
set tid 0
set rnf 0
set thetime 0
set animate_georef 0

if { [ info exists inc ] == 0 } {
  set inc 1
}

if { [ info exists play_interval ] == 0 } {
  set play_interval 1
}

if { [ info exists rn ] == 0 } {
  set rn 1000
  set old_rn $rn
} else {
  set old_rn $rn
  unset rn
  set rn $old_rn
}


if { [ info exists wf_chan ] == 0 } {
  set wf_chan [ expr int(7) ]
}

if { [ info exists depth_display_units ] == 0 } {
  set depth_display_units  meters
} else {
  set temp $depth_display_units;	;# need to kill old traces
  unset depth_display_units
  set depth_display_units  $temp
}

if { [ info exists data_path ] == 0 } {
  set data_path ""
}

##AN: added to initially set the value of sod time from sf
if { [info exists thetime] != 0} {
   set temp $thetime;
   unset thetime
   set thetime $temp
   puts "thetime from sf is set to $thetime"
} else {
   set thetime 0
}

# this gets set by Yorick:load_edb in edb_access.i
exp_send "#include \"drast.i\"\r"	;# Load Yorick drast.i code
expect ">";				;# Wait for Yorick prompt


############################################################################## 
# The following calls Yorick get_total_edb_records function which causes
# it to then execute a tcl command to set total_edb_records in tcl.  This 
# cannot be inside a { block } or it won't set the variable for some reason.
############################################################################## 
set   total_edb_records 0
unset total_edb_records 		;# this to insure no traces are attached
set   total_edb_records 1000;		;# restablish this variable
exp_send "get_total_edb_records\r";	;# reload from Yorick to insure sync
expect ">";				;# Wait for Yorick prompt


####global blist
set blist { .rslider.bf1.stop    .rslider.bf1.play        .rslider.bf2.exwf \
	    .rslider.bf1.yalp    .rslider.bf1.enter_rn    .rslider.scale    \
	    .rslider.bf1.nxtrast .rslider.bf1.prevrast    .rslider.bf1.pint \
	    .rslider.bf1.inc \
          }

proc sod2rn { sod } {
##AN: added procedure sod2rn to convert sf sod value to rn
    global rn thetime rnf rnl 
###    set cmd "where(((edb.seconds - edb(1).seconds - 4*3600) + edb(1).seconds%86400) == $thetime)"
    set cmd "where(((edb.seconds - soe_day_start) ) == $thetime)"
    exp_send "rnarr = $cmd \r"
    expect ">"
    ##check to see if the variable rnarr is not a <nuller>
    exp_send "numberof(rnarr)\r"
    #the number of records is now echoed
    expect ">"
    set no_rn [lindex [split $expect_out(buffer) \n] 1]
    puts "no_rn = $no_rn\n"
    if {$no_rn == 0} {
	tk_messageBox -icon error \
	  -message "Specified SOMD value ($sod) not in Raster Range." \
 	  -type ok
	return
    }
	
    
    exp_send "write, format=\"%i \",rnarr(1)\r"
    expect {
	-indices -re "\r" {
	#do nothing when the write command is echoed.
	}
    }
    #the first record  number is now echoed
    expect ">"
    set rnf1 [lindex [split $expect_out(buffer) \n ] 1]
    set rnf [lindex [split $rnf1 > ] 0] 
    puts "first: $rnf \r"

    #now display the last record number in photo
    exp_send "write, format=\"%i \",rnarr(0)\r"
    expect {
        -indices -re "\r" {
        #do nothing when the write command is echoed.
        }
    }
    #the last record  number is now echoed
    expect ">"
    set rnl1 [lindex [split $expect_out(buffer) \n ] 1]
    set rnl [lindex [split $rnl1 > ] 0]
    puts "last: $rnl \r"
}

proc gstate { lst state } {
  foreach x $lst { 
    eval "$x configure -state $state"
  }
}

proc ter { n e o } {
 global total_edb_records data_path rn
 if { [ winfo exists .rslider.scale ] == 1 } {
   .rslider.scale configure -to $total_edb_records 
   wm title .rslider "drast:  $data_path"
 }
}

proc dus { n e o } {
 global depth_display_units rn total_edb_records elevation_offset
 if {$depth_display_units != "georef"} {
###########  exp_send "depth_display_units = \"$depth_display_units\" \r" 
  exp_send "set_depth_scale, \"$depth_display_units\" \r" 
    expect ">"
  if { $total_edb_records != 0 } {
    exp_send "ytk_rast,$rn; redraw\r" 
  }
 } else {
  exp_send "geo_rast( $rn, fsmarks=0, eoffset=$elevation_offset );\r"
 }
}

proc sft { n e o } {
## AN: added procedure sft to be used with the trace command for sf
	global thetime rnf rn
	sod2rn $thetime
	exp_send "ytk_rast, $rnf\r"
	set rn $rnf	
} 



proc play {} {
 global tid play_interval rn inc play_dir play_flag total_edb_records animate_georef
     if { $play_dir == "fwd" } {
       set rn [ expr $rn + $inc ] 
     } else {
       set rn [ expr $rn - $inc ] 
     }
     if { $rn > $total_edb_records } {
 	.rslider.bf1.stop invoke	
        set rn $total_edb_records;
     } elseif { $rn <= 1 } {
 	.rslider.bf1.stop invoke	
        set rn 1;
     }
     if { $animate_georef } {
        exp_send "ytk_rast,$rn; geo_rast,$rn, fsmarks=0, eoffset=0.0; \r" 
     } else {
        exp_send "ytk_rast,$rn\r" 
     }
     expect ">"
     if { $play_flag } { 
       set tid [ after $play_interval play ]
     }
}


proc photoplay {} {
##AN: added procedure photoplay to play all rasters within one sf photo
 global tid play_interval rn inc play_dir play_flag total_edb_records rnf rnl
     if { $play_dir == "fwd" } {
       set rn [ expr $rn + $inc ] 
     } else {
       set rn [ expr $rn - $inc ] 
     }
     if { $rn > $total_edb_records } {
 	.rslider.bf1.stop invoke	
        set rn $total_edb_records;
     } elseif { $rn <= 1 } {
 	.rslider.bf1.stop invoke	
        set rn 1;
     }
     if { $rn > $rnl } {
 	.rslider.bf1.stop invoke	
        set rn $rnf;
     } elseif { $rn < $rnf } {
 	.rslider.bf1.stop invoke	
        set rn $rnf;
     } else {
        exp_send "ytk_rast,$rn\r" 
        expect ">"
        if { $play_flag } { 
           set tid [ after $play_interval photoplay ]
        }
    }
}

destroy .rslider
destroy .rslider.scale

toplevel .rslider
frame .rslider.bf1
frame .rslider.bf2

 .rslider configure -menu .rslider.mb
 menu .rslider.mb
 menu .rslider.mb.file
 menu .rslider.mb.graph
 menu .rslider.mb.waveforms
 menu .rslider.mb.photos
.rslider.mb      add cascade -label File      -underline 0 -menu .rslider.mb.file
.rslider.mb      add cascade -label Graph     -underline 0 -menu .rslider.mb.graph
.rslider.mb      add cascade -label Waveforms -underline 0 -menu .rslider.mb.waveforms
.rslider.mb      add cascade -label Photos    -underline 0 -menu .rslider.mb.photos


############### File pull downs
.rslider.mb.file add command -label "load_edb.." -command {
    exp_send "load_edb\r"
  }
.rslider.mb.file add command -label "Reload drast.i" -command {
  exp_send "#include \"drast.i\"\r"
}
.rslider.mb.file add command -label "Reload drast.ytk" \
   -command [list source [file join $src_path drast.ytk]]

.rslider.mb.file add separator 
.rslider.mb.file add command -label "Dismiss" -command { destroy .rslider }


############ Graph pulldown
.rslider.mb.graph add command -label "Reset Raster window limits" -command {
     exp_send "window,1; limits;\r";
  }

.rslider.mb.graph add separator 

.rslider.mb.graph  add command -label "Reset Waveform limits" -command {
  exp_send "window,0; limits;\r";
}
.rslider.mb.graph add separator 
.rslider.mb.graph add radiobutton \
	-variable depth_display_units \
	-label Meters \
	-value meters
.rslider.mb.graph add radiobutton \
	-variable depth_display_units \
	-label Feet \
	-value feet
.rslider.mb.graph add radiobutton \
	-variable depth_display_units \
	-label Nanoseconds \
	-value ns
.rslider.mb.graph add radiobutton \
	-variable depth_display_units \
	-label GeoReferenced \
	-value georef

set wfc1 1
set wfc2 2
set wfc3 4


############ Waveform pulldown
.rslider.mb.waveforms add checkbutton \
	-label "90\% channel (Black)" \
	-onvalue  1 \
	-offvalue 0 \
	-variable wfc1 \
	-command { global wf_chan wfc1; set wf_chan [ expr $wfc1+$wfc2+$wfc3 ] } \

.rslider.mb.waveforms add checkbutton \
	-onvalue  2 \
	-offvalue 0 \
	-variable wfc2 \
	-command { global wf_chan wfc1; set wf_chan [ expr $wfc1+$wfc2+$wfc3 ] } \
	-label "10\% channel (Red)" 

.rslider.mb.waveforms add checkbutton \
	-onvalue  4 \
	-offvalue 0 \
	-variable wfc3 \
	-command { global wf_chan wfc1; set wf_chan [ expr $wfc1+$wfc2+$wfc3 ] }  \
	-label "1\% channel (Blue)" 

##AN: added menu bar options for sf photos
############ Photo pulldown
.rslider.mb.photos add command -label "Review 1Hz Photos..." -command {
        exec "./sf_a.tcl" &
 }

.rslider.mb.photos add checkbutton \
	-label "Link sf Photos to Rasters" \
	-onvalue 1 \
	-offvalue 0 \
	-variable lsf \
	-command {
 	 	global thetime lsf rn rnf
		if {$lsf == 1} {
		   sod2rn $thetime
		   exp_send "ytk_rast, $rnf\r"
		   set rn $rnf
		} 
	}
.rslider.mb.photos add command -label "Display First Raster in sf Photo" -command {
	global thetime rnf rn lsf
	sod2rn $thetime
	exp_send "ytk_rast, $rnf\r"
	set rn $rnf	
}


.rslider.mb.photos add command -label "Play through Rasters in sf Photo" -command {
	global thetime rnl rnf rn tid play_interval play_dir play_flag
	sod2rn $thetime
	exp_send "ytk_rast, $rnf\r"
	set play_flag 1 
 	set play_dir fwd
	set rn $rnf
	exp_send "window, 1;animate,1\r" 
 	set tid [ after $play_interval  photoplay ]
}

.rslider.mb.photos add command -label "YalP through Rasters in sf Photo" -command {
	global thetime rnl rnf rn tid play_interval play_dir play_flag
	sod2rn $thetime
	exp_send "ytk_rast, $rnl\r"
	set play_flag 1 
 	set play_dir rev
	set rn $rnl
	exp_send "animate,1\r" 
 	set tid [ after $play_interval  photoplay ]
}

.rslider.mb.photos add command -label "Display Last Raster in sf Photo" -command {
	global thetime rnl rn
	sod2rn $thetime
	exp_send "ytk_rast, $rnl\r"
	set rn $rnl	
 }



 button  .rslider.bf1.nxtrast -text ">" -command  { 
  global total_edb_records rn
     set rn [ expr $rn + $inc ]
     if { $rn > $total_edb_records } {
         set rn $total_edb_records;
     } 
     if { $animate_georef } {
         exp_send "ytk_rast, [expr $rn]; geo_rast, [expr $rn], fsmarks=0, eoffset=0.0; \r" 
     } else {
         exp_send "ytk_rast,[expr $rn]\r" 
     }
 }

 button  .rslider.bf1.prevrast -text "<" -command { 
  global rn
     set rn [ expr $rn - $inc ]
     if { $rn < 1 } {
         set rn 1;
     } 
     if { $animate_georef } {
         exp_send "ytk_rast, [expr $rn]; geo_rast, [expr $rn], fsmarks=0, eoffset=0.0; \r" 
     } else {
         exp_send "ytk_rast,[expr $rn]\r" 
     }
 }


 scale .rslider.scale \
	-orient horizontal \
	-length 445 \
	-showvalue 0 \
	-from 1 \
	-to $total_edb_records \
	-variable rn \
	-bigincrement 100 


bind .rslider.scale <ButtonRelease>  { 
 global rn 
	if { $animate_georef } {
           exp_send "ytk_rast, [expr $rn]; geo_rast, [expr $rn], fsmarks=0, eoffset=0.0; \r" 
	} else {
           exp_send "ytk_rast,[expr $rn]\r" 
	}
 }



button .rslider.bf2.exwf -text "Examine waveforms" -command {
  global blist depth_display_units
  gstate $blist disabled
  update idletasks
  if {$depth_display_units == "georef"} {
    exp_send "rn = $rn; msel_wf(wfa, cb=$wf_chan, geo=1)\r";
  } else {
    exp_send "rn = $rn; msel_wf(wfa, cb=$wf_chan)\r";
  }
  set timeout 9999
  expect "completed"
  gstate $blist normal
}

set elevation_offset 0.0;

button .rslider.bf2.georef -text "Geo Ref" -command {
  global rn elevation_offset;
  exp_send "geo_rast( $rn, fsmarks=0, eoffset=$elevation_offset );\r"
}

checkbutton .rslider.bf2.angeo -text "Animate GeoRef" -variable animate_georef

spinbox .rslider.bf2.elevation_offset \
        -justify center \
        -from -1000 -to 1000 -increment 0.5 -format %.2f \
        -width 7 \
        -textvariable elevation_offset
::tooltip::tooltip .rslider.bf2.elevation_offset \
        "elevation_offset: Enter the elevation offset (in meters) here."

button .rslider.bf1.stop -text "Stop" -command {
 global tid play_flag rnf 
  exp_send "window,1; animate,0; \r" 
#### exp_send "window,1;\r" 
  after cancel $tid;
  set play_flag 0 
  ##exp_send "ytk_rast, $rnf\r"
}


button .rslider.bf1.play -text "Play->" -command {
 global tid play_interval play_dir play_flag
 set play_flag 1 
 set play_dir fwd
 exp_send "window,1; animate,1\r" 
 set tid [ after $play_interval  play ]
}

 button .rslider.bf1.yalp -text "<-Yalp" -command {
 global tid play_interval play_dir play_flag
 set play_flag 1 
 set play_dir rev 
 exp_send "window,1; animate,1\r" 
 set tid [ after $play_interval  play ]
}

spinbox .rslider.bf1.pint -textvariable play_interval \
   -from 1 -to 3000 -increment 1 -width 5

 entry .rslider.bf1.enter_rn -width 7 -textvariable rn

 bind .rslider.bf1.enter_rn <Return> { 
     if { $rn < $total_edb_records } {
	if { $animate_georef } {
           exp_send "ytk_rast, [expr $rn]; geo_rast, [expr $rn], fsmarks=0, eoffset=0.0; \r" 
	} else {
           exp_send "ytk_rast,[expr $rn]\r" 
	}
     } else {
        set rn $total_edb_records;
     }
}

bind .rslider  <y> {
  .rslider.bf1.yalp invoke
}

bind .rslider  <s> {
  .rslider.bf1.stop invoke
}

bind .rslider  <p> {
  .rslider.bf1.play invoke
}


spinbox .rslider.bf1.inc -textvariable inc \
   -from 1 -to 1000 -increment 1 -width 5

trace variable depth_display_units w dus
trace variable total_edb_records   w ter
##AN: added trace command to trace thetime from sf
trace variable thetime w sft

  pack \
	.rslider.bf1.prevrast \
	.rslider.bf1.nxtrast \
        .rslider.bf1.enter_rn \
	.rslider.bf1.inc \
	.rslider.bf1.yalp \
	.rslider.bf1.stop \
	.rslider.bf1.play  \
	.rslider.bf1.pint  \
	-side left -expand 1 -fill both -anchor nw


  pack \
	.rslider.bf2.exwf \
	-side left -expand 0 -fill both -anchor nw 

  pack \
	.rslider.bf2.georef .rslider.bf2.elevation_offset .rslider.bf2.angeo \
	-side left -expand 0 -fill both


  pack  \
	.rslider.scale \
	.rslider.bf1  \
	.rslider.bf2  \
	-side top -expand 1 -fill both


puts "rn = $rn  old_rn=$old_rn\r\n"


