package require msgcat

# bath_ctl array -- tied to Yorick bath_ctl variable
if {![info exists bath_ctl]} {
   set bath_ctl(laser) -5.0
   set bath_ctl(water) -10
   set bath_ctl(agc) -10
   set bath_ctl(thresh) 0
   set bath_ctl(first) 0
   set bath_ctl(last) 0
   set bath_ctl(maxsat) 0
}

foreach key [list laser water agc thresh first last maxsat] {
   tky_tie add broadcast ::bath_ctl($key) to "bath_ctl.$key" -initialize 1
}
unset key

namespace eval bathctl {
   namespace import ::msgcat::mc
   namespace import ::msgcat::mcset

   mcset en laser Laser
   mcset en water Water
   mcset en agc AGC
   mcset en thresh Thresh
   mcset en first First
   mcset en last Last
   mcset en maxsat "Max Sat"

   namespace forget ::msgcat::mcset

   namespace eval v {
      # Toplevel window for the GUI
      variable win .bathctl
      # Filetypes to use for open/save dialogs
      variable filetypes {
         {{bctl files} {.bctl}}
         {{all files} {*}}
      }
      # Presets -- can be chosen through the menu
      variable presets {
         Clear {
            laser -2.4 water -0.6 agc -0.3 thresh 4.0
            first 11 last 220 maxsat 2
         }
         Bays {
            laser -2.4 water -1.5 agc -3.0 thresh 4.0
            first 11 last 60 maxsat 2
         }
         Crappy {
            laser -2.4 water -3.5 agc -6.0 thresh 2.0
            first 11 last 60 maxsat 2
         }
         {Super shallow} {
            laser -2.4 water -2.4 agc -3.0 thresh 4.0
            first 9 last 30 maxsat 2
         }
         {Shallow riverine} {
            laser -4.7 water -4.8 agc -3.3 thresh 3.0
            first 11 last 50 maxsat 2
         }
      }
      # Valid ranges for variables, as well as recommended increment
      variable ranges {
         laser {-5.0 -1.0 0.1}
         water {-10 0.1 0.1}
         agc {-10 0.1 0.1}
         thresh {0 50.0 0.1}
         first {0 300 1}
         last {0 300 1}
         maxsat {0 10 1}
      }
   }
}

proc bathctl::load_preset preset {
# Load a preset as defined in v::presets
   dict for {key val} [dict get $v::presets $preset] {
      set ::bath_ctl($key) $val
   }
}

proc bathctl::load_file fn {
# Load the bath_ctl data defined in fn
   if {[file readable $fn]} {
      set cnf [interp create -safe]
      if {[catch [list interp invokehidden $cnf source $fn] err]} {
         puts "Error encountered when loading bath_ctl file: $err"
      } else {
         if {[interp eval $cnf array exists bath_ctl]} {
            foreach key [interp eval $cnf array names bath_ctl] {
               set ::bath_ctl($key) [interp eval $cnf set bath_ctl($key)]
            }
         }
      }
      interp delete $cnf
   }
}

proc bathctl::save_file fn {
# Save the current bath_ctl to fn
   set f [open $fn w]
   foreach key [array names ::bath_ctl] {
      puts $f [list set bath_ctl($key) $::bath_ctl($key)]
   }
   close $f
}

proc bathctl::gui_load {} {
# Prompts user for a file to load
   set fn [tk_getOpenFile -initialdir $::data_path \
      -filetypes $v::filetypes]
   if {$fn ne "" && [file readable $fn]} {
      load_file $fn
      wm title $v::win "bathctl:[file tail $fn]"
   }
}

proc bathctl::gui_save {} {
# Prompts user for a file to save to
   set fn [tk_getSaveFile -initialdir $::data_path \
      -filetypes $v::filetypes]
   if {$fn ne ""} {
      if {[file extension $fn] ne ".bctl"} {
         append fn .bctl
      }
      save_file $fn
      tk_messageBox -icon info -message "bath_ctl settings saved to:[file tail $fn]"
   }
}

proc bathctl::gui {} {
# Either creates or deiconifies the GUI
   if {[winfo exists $v::win]} {
      wm deiconify $v::win
   } else {
      bathctl::gui_launch
   }
}

proc bathctl::gui_launch {} {
# Creates the GUI
   set w $v::win
   destroy $w
   toplevel $w

   wm protocol $w WM_DELETE_WINDOW [list wm withdraw $w]
   wm resizable $w 0 0

   menu $w.mb
   menu $w.mb.file
   menu $w.mb.preset

   $w.mb add cascade -label File -underline 0 -menu $w.mb.file
   $w.mb.file add command -label "Load Bathy Parameters..." \
      -command bathctl::gui_load
   $w.mb.file add command -label "Save Bathy Parameters..." \
      -command bathctl::gui_save
   $w.mb.file add separator
   $w.mb.file add command -label "Dismiss" -command [list wm withdraw $w]

   $w.mb add cascade -label "Presets" -underline 0 -menu $w.mb.preset
   foreach {preset -} $v::presets {
      $w.mb.preset add command -label $preset \
         -command [list bathctl::load_preset $preset]
   }

   $w configure -menu $w.mb

   foreach {key range} $v::ranges {
      lassign $range rmin rmax rinc
      label $w.lb$key -text [mc $key]
      ttk::spinbox $w.sb$key -textvariable ::bath_ctl($key) -format %.2f \
         -from $rmin -to $rmax -increment $rinc -width 6
      grid $w.lb$key $w.sb$key -in $w -sticky ew
      grid configure $w.lb$key -sticky e
   }

   button $w.message -text "\
Warning: These settings will\
\nnot persist when using the\
\nMission Configuration manager\
\nto switch between days. Click\
\nfor more information." \
      -command bathctl::gui_message

   grid $w.message - -sticky news
   grid columnconfigure $w 1 -weight 1
}

proc bathctl::gui_message {} {
   set w $v::win.msgwin
   destroy $w
   toplevel $w

   message $w.message -justify left -width 500 \
      -text \
"The Mission Configuration manager has support for including bathy settings,\
however, there is a major quirk that users need to be aware of when\
interactively adjusting settings: any unsaved interactive settings will be lost\
whenever the Mission Configuration manager loads a mission day.

If you are interactively attempting to fine-tune bathy settings, then make sure\
you load the data for the mission day first. Then make your adjustments, then\
process. But make sure you don't do anything else that might trigger a mission\
configuration load. Such triggers are prevalent in ALPS, including within Pixel\
Analysis. (In the Pixel Analysis tool, this trigger can be disabled by\
deselecting \"Auto load mission data\".)

Once you have your settings defined, you'll need to save them to file for\
future use. You'll also need to update the Mission Configuration to have the\
mission day point to its bathy settings file. However, please note that changes\
to the bathy settings file may not be immediately reflected within ALPS due to\
caching.  If you expect to be changing and resaving settings files often, you\
should disable caching in the Mission Configuration manager using \"Cache ->\
Disable cache\". Alternately, you can manually use \"Cache -> Clear cache\"\
whenever you know the cache needs to be cleared to pick up new changes."

   pack $w.message -fill both -expand 1
}
